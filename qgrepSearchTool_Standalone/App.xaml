<Application x:Class="qgrepSearchTool_Standalone.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:qgrepSearchTool_Standalone"
             xmlns:controlzEx="urn:controlzex"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>
            
            <!--<ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/qgrepControls;component/ResourceDictionary.xaml" />
            </ResourceDictionary.MergedDictionaries>-->

            <BitmapImage x:Key="AppIcon" UriSource="Resources/magnifying-glass-128px.png"/>

            <Style x:Key="WindowTitleBarButton" TargetType="Button">
                <Style.Setters>
                    <Setter Property="SnapsToDevicePixels" Value="True" />
                    <Setter Property="Background" Value="{DynamicResource Window.Button.Background}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource Window.Button.Background}" />
                    <Setter Property="Foreground" Value="{DynamicResource Window.Button.Icon}" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ButtonBase}">
                                <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                                    <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <!--<Trigger Property="Button.IsDefaulted" Value="true">
                                        <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                    </Trigger>-->
                                    <Trigger Property="IsMouseOver" Value="true">
                                        <Setter Property="Background" TargetName="border" Value="{DynamicResource Window.Button.IsMouseOver.Background}"/>
                                        <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Window.Button.IsMouseOver.Background}"/>
                                        <Setter Property="Foreground" Value="{DynamicResource Window.Button.IsMouseOver.Icon}"/>
                                    </Trigger>
                                    <Trigger Property="IsPressed" Value="true">
                                        <Setter Property="Background" TargetName="border" Value="{DynamicResource Window.Button.IsMouseDown.Background}"/>
                                        <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Window.Button.IsMouseDown.Background}"/>
                                        <Setter Property="Foreground" Value="{DynamicResource Window.Button.IsMouseDown.Icon}"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style.Setters>
                <Style.Triggers>
                    <Trigger Property="controlzEx:NonClientControlProperties.IsNCMouseOver" Value="true">
                        <Setter Property="Background" Value="{DynamicResource Window.Button.IsMouseOver.Background}" />
                        <Setter Property="BorderBrush" Value="{DynamicResource Window.Button.IsMouseOver.Background}" />
                        <Setter Property="Foreground" Value="{DynamicResource Window.Button.IsMouseOver.Icon}"/>
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="true">
                        <Setter Property="Background" Value="{DynamicResource Window.Button.IsMouseOver.Background}" />
                        <Setter Property="BorderBrush" Value="{DynamicResource Window.Button.IsMouseOver.Background}" />
                        <Setter Property="Foreground" Value="{DynamicResource Window.Button.IsMouseOver.Icon}"/>
                    </Trigger>
                    <Trigger Property="IsPressed" Value="true">
                        <Setter Property="Background" Value="{DynamicResource Window.Button.IsMouseDown.Background}" />
                        <Setter Property="BorderBrush" Value="{DynamicResource Window.Button.IsMouseDown.Background}" />
                        <Setter Property="Foreground" Value="{DynamicResource Window.Button.IsMouseDown.Icon}"/>
                    </Trigger>
                    <Trigger Property="controlzEx:NonClientControlProperties.IsNCPressed" Value="true">
                        <Setter Property="Background" Value="{DynamicResource Window.Button.IsMouseDown.Background}" />
                        <Setter Property="BorderBrush" Value="{DynamicResource Window.Button.IsMouseDown.Background}" />
                        <Setter Property="Foreground" Value="{DynamicResource Window.Button.IsMouseDown.Icon}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="MinimizeButton" TargetType="Button" BasedOn="{StaticResource WindowTitleBarButton}">
                <Setter Property="Content">
                    <Setter.Value>
                        <Path Data="F1M3,8L13,8 13,7 3,7z" Fill="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" />
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="CloseButton" TargetType="Button" BasedOn="{StaticResource WindowTitleBarButton}">
                <Setter Property="Content">
                    <Setter.Value>
                        <Path Data="F1M8.583,8L13,12.424 12.424,13 8,8.583 3.576,13 3,12.424 7.417,8 3,3.576 3.576,3 8,7.417 12.424,3 13,3.576z" Fill="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" />
                    </Setter.Value>
                </Setter>
            </Style>
            <!--<Style x:Key="MaxRestoreButton" TargetType="Button" BasedOn="{StaticResource WindowTitleBarButton}">
                <Setter Property="Content">
                    <Setter.Value>
                        <Path Data="F1M12,12L4,12 4,4 12,4z M3,13L13,13 13,3 3,3z" Fill="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" />
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type controlzEx:WindowChromeWindow}}, Path=WindowState}" Value="Maximized">
                        <Setter Property="Content">
                            <Setter.Value>
                                <Path Data="F1M11.999,10.002L10.998,10.002 10.998,5.002 5.998,5.002 5.998,4.001 11.999,4.001z M10.002,11.999L4.001,11.999 4.001,5.998 10.002,5.998z M5.002,3L5.002,5.002 3,5.002 3,13 10.998,13 10.998,10.998 13,10.998 13,3z" Fill="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" Visibility="Visible" />
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>
                </Style.Triggers>
            </Style>-->

            <Style x:Key="MaxRestoreButton" TargetType="Button" BasedOn="{StaticResource WindowTitleBarButton}">
                <Style.Setters>
                    <Setter Property="SnapsToDevicePixels" Value="True" />
                    <Setter Property="Background" Value="{DynamicResource Window.Button.Background}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource Window.Button.Background}" />
                    <Setter Property="Foreground" Value="{DynamicResource Window.Button.Icon}" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ButtonBase}">
                                <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                                    <Grid Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                        <Path x:Name="Icon_Maximize" Data="F1M12,12L4,12 4,4 12,4z M3,13L13,13 13,3 3,3z" Fill="{TemplateBinding Foreground}" />
                                        <Path x:Name="Icon_Restore" Data="F1M11.999,10.002L10.998,10.002 10.998,5.002 5.998,5.002 5.998,4.001 11.999,4.001z M10.002,11.999L4.001,11.999 4.001,5.998 10.002,5.998z M5.002,3L5.002,5.002 3,5.002 3,13 10.998,13 10.998,10.998 13,10.998 13,3z" Fill="{TemplateBinding Foreground}" Visibility="Collapsed" />
                                    </Grid>
                                </Border>
                                <ControlTemplate.Triggers>
                                    <!--<Trigger Property="Button.IsDefaulted" Value="true">
                                        <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                    </Trigger>-->
                                    <Trigger Property="IsMouseOver" Value="true">
                                        <Setter Property="Background" TargetName="border" Value="{DynamicResource Window.Button.IsMouseOver.Background}"/>
                                        <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Window.Button.IsMouseOver.Background}"/>
                                        <Setter Property="Foreground" Value="{DynamicResource Window.Button.IsMouseOver.Icon}"/>
                                    </Trigger>
                                    <Trigger Property="IsPressed" Value="true">
                                        <Setter Property="Background" TargetName="border" Value="{DynamicResource Window.Button.IsMouseDown.Background}"/>
                                        <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Window.Button.IsMouseDown.Background}"/>
                                        <Setter Property="Foreground" Value="{DynamicResource Window.Button.IsMouseDown.Icon}"/>
                                    </Trigger>
                                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type controlzEx:WindowChromeWindow}}, Path=WindowState}" Value="Maximized">
                                        <Setter Property="Visibility" Value="Visible" TargetName="Icon_Restore" />
                                        <Setter Property="Visibility" Value="Collapsed" TargetName="Icon_Maximize" />
                                    </DataTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style.Setters>
            </Style>
            
            <Style x:Key="{x:Type controlzEx:WindowChromeWindow}" TargetType="{x:Type controlzEx:WindowChromeWindow}">
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="UseRadialGradientForCorners" Value="True" />
                <Setter Property="BorderBrush" Value="{x:Null}" />
                <Setter Property="NCActiveBrush" Value="{DynamicResource Window.Background}" />
                <Setter Property="NCCurrentBrush" Value="{DynamicResource Window.Background}" />
                <Setter Property="NCNonActiveBrush" Value="{DynamicResource Window.Background}" />
                <Setter Property="GlowDepth" Value="1" />
                <Setter Property="GlowColor" Value="{DynamicResource Window.Border.Color}" />
                <Setter Property="NonActiveGlowColor" Value="{DynamicResource Window.Border.Color}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type controlzEx:WindowChromeWindow}">
                            <Grid Background="{TemplateBinding Background}"
                                  Margin="{TemplateBinding Padding}">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="29" />
                                            <RowDefinition Height="*" />
                                        </Grid.RowDefinitions>

                                        <Grid Grid.Row="0"
                  VerticalAlignment="Center"
                  controlzEx:WindowChrome.IsHitTestVisibleInChrome="False"
                  controlzEx:NonClientControlProperties.HitTestResult="CAPTION">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto" />
                                                <ColumnDefinition Width="*" />
                                                <ColumnDefinition Width="Auto" />
                                            </Grid.ColumnDefinitions>
                                            <Border Grid.ColumnSpan="10" Background="{Binding ElementName=Window, Path=NCCurrentBrush}" />

                                        <Image Source="{DynamicResource AppIcon}" Width="16" Height="16" Margin="7,1,0,0" RenderOptions.BitmapScalingMode="HighQuality" />
                                        <TextBlock Grid.Column="1"
                           Margin="5 7 0 0"
                           HorizontalAlignment="Left"
                           Text="qgrep Search Tool"
                           TextTrimming="CharacterEllipsis" Foreground="{DynamicResource Window.Foreground}" />

                                            <UniformGrid Grid.Column="2" Columns="3">
                                            <Button Style="{DynamicResource MinimizeButton}"
                            IsEnabled="{Binding IsEnabled, ElementName=MinimizeButton}"
                            Width="45"
                            Height="29"
                            controlzEx:NonClientControlProperties.HitTestResult="MINBUTTON"
                            controlzEx:NonClientControlProperties.ClickStrategy="AutomationPeer" Click="Minimize_Click">
                                                </Button>
                                                <Button Style="{DynamicResource MaxRestoreButton}"
                            IsEnabled="{Binding IsEnabled, ElementName=MaximizeButton}"
                            Width="45"
                            Height="29"
                            controlzEx:NonClientControlProperties.HitTestResult="MAXBUTTON"
                            controlzEx:NonClientControlProperties.ClickStrategy="MouseEvent" Click="Maximize_Click">
                                                </Button>
                                            <Button Style="{DynamicResource CloseButton}"
                            Width="45"
                            Height="29"
                            controlzEx:NonClientControlProperties.HitTestResult="CLOSE"
                            controlzEx:NonClientControlProperties.ClickStrategy="MouseEvent" Click="Close_Click">
                                                </Button>
                                            </UniformGrid>
                                        </Grid>
                                    <AdornerDecorator Grid.Row="1">
                                        <ContentPresenter />
                                    </AdornerDecorator>
                                </Grid>

                                <Border x:Name="PART_Border"
                                        HorizontalAlignment="Stretch"
                                        VerticalAlignment="Stretch"
                                        Background="{x:Null}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        UseLayoutRounding="True" />

                                <ResizeGrip x:Name="WindowResizeGrip"
                                            HorizontalAlignment="Right"
                                            VerticalAlignment="Bottom"
                                            IsTabStop="false"
                                            Visibility="Collapsed"
                                            controlzEx:WindowChrome.ResizeGripDirection="BottomRight" />
                            </Grid>
                            <ControlTemplate.Triggers>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="Window.ResizeMode" Value="CanResizeWithGrip" />
                                        <Condition Property="Window.WindowState" Value="Normal" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible" />
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="WindowState" Value="Maximized">
                        <Setter Property="Margin" Value="0" />
                    </Trigger>
                    <!--
                        #1823 try to fix another nasty issue
                        WindowState = Maximized
                        ResizeMode = NoResize
                    -->
                    <Trigger Property="ResizeMode" Value="NoResize">
                        <Setter Property="Margin" Value="0" />
                    </Trigger>
                    <Trigger Property="IsNCActive" Value="False">
                        <Setter Property="NCCurrentBrush" Value="{Binding NCNonActiveBrush, RelativeSource={RelativeSource Self}}" />
                    </Trigger>
                </Style.Triggers>
            </Style>
        </ResourceDictionary>
    </Application.Resources>
</Application>
