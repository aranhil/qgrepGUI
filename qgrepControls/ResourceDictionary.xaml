<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:av="http://schemas.microsoft.com/expression/blend/2008" 
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="av"
                    xmlns:chrome="clr-namespace:Xceed.Wpf.Toolkit.Chromes;assembly=Xceed.Wpf.Toolkit"
                    xmlns:local="clr-namespace:Xceed.Wpf.Toolkit;assembly=Xceed.Wpf.Toolkit"
                    xmlns:prim="clr-namespace:Xceed.Wpf.Toolkit.Primitives;assembly=Xceed.Wpf.Toolkit"
                    xmlns:conv="clr-namespace:Xceed.Wpf.Toolkit.Core.Converters;assembly=Xceed.Wpf.Toolkit"
                    xmlns:shell="clr-namespace:System.Windows.Shell;assembly=PresentationFramework"
                    xmlns:themes="clr-namespace:Xceed.Wpf.Toolkit.Themes;assembly=Xceed.Wpf.Toolkit"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:controlzEx="urn:controlzex"
                    x:Class="qgrepControls.MyResourceDictionary">
    <SolidColorBrush x:Key="Background" Color="White" />
    <SolidColorBrush x:Key="Foreground" Color="Black" />
    <SolidColorBrush x:Key="Selection" Color="#0078D4" />
    <SolidColorBrush x:Key="TextBox.Background" Color="White" />
    <SolidColorBrush x:Key="Result.File.Foreground" Color="Gray"/>
    <SolidColorBrush x:Key="Result.Text.Foreground" Color="Black" />
    <SolidColorBrush x:Key="Result.Highlight.Foreground" Color="Black" />
    <SolidColorBrush x:Key="Result.Highlight.Background" Color="#25a5be" />
    <SolidColorBrush x:Key="Result.IsMouseOver.Background" Color="#d3eaf2" />
    <SolidColorBrush x:Key="Result.IsSelected.Background" Color="#bee0ec" />
    <SolidColorBrush x:Key="Result.IsSelected.IsInactive.Background" Color="#444444" />
    <SolidColorBrush x:Key="IconButton.Background" Color="Transparent" />
    <SolidColorBrush x:Key="IconButton.Foreground" Color="Gray" />
    <SolidColorBrush x:Key="IconButton.IsMouseOver.Background" Color="Transparent" />
    <SolidColorBrush x:Key="IconButton.IsMouseOver.Foreground" Color="Black" />
    <SolidColorBrush x:Key="Border" Color="Gray" />
    <SolidColorBrush x:Key="Border.IsMouseOver" Color="Black" />
    <SolidColorBrush x:Key="Border.IsSelected" Color="Black" />
    <SolidColorBrush x:Key="TextBox.Hint.Background" Color="Transparent"/>
    <SolidColorBrush x:Key="TextBox.Hint.Foreground" Color="Gray"/>
    <SolidColorBrush x:Key="Overlay.Background" Color="#7C000000" />
    <SolidColorBrush x:Key="Button.IsDisabled.Background" Color="#38618d" />
    <SolidColorBrush x:Key="Button.IsDisabled.Foreground" Color="#b4c4d4" />
    <SolidColorBrush x:Key="Button.IsDisabled.Border" Color="#b4c4d4" />
    <SolidColorBrush x:Key="Button.Background" Color="#b4c4d4" />
    <SolidColorBrush x:Key="Button.Foreground" Color="Black" />
    <SolidColorBrush x:Key="Button.Border" Color="Black" />
    <SolidColorBrush x:Key="Button.IsMouseOver.Background" Color="#bee0ec" />
    <SolidColorBrush x:Key="Button.IsMouseOver.Border" Color="#bee0ec" />
    <SolidColorBrush x:Key="Button.IsMouseDown.Background" Color="Gray" />
    <SolidColorBrush x:Key="Button.IsMouseDown.Foreground" Color="Black" />
    <SolidColorBrush x:Key="Button.IsMouseDown.Border" Color="Gray" />
    <SolidColorBrush x:Key="ComboBox.Background" Color="#b4c4d4" />
    <SolidColorBrush x:Key="ComboBox.IsMouseOver.Background" Color="#bee0ec" />
    <SolidColorBrush x:Key="ComboBox.Foreground" Color="Black" />
    <SolidColorBrush x:Key="ComboBox.Arrow" Color="Black" />
    <SolidColorBrush x:Key="ComboBox.IsDisabled.Arrow" Color="Gray" />
    <SolidColorBrush x:Key="ComboBox.Border" Color="#b4c4d4" />
    <SolidColorBrush x:Key="ComboBox.IsMouseOver.Border" Color="#bee0ec" />
    <SolidColorBrush x:Key="ComboBox.Popup.Border" Color="Black" />
    <SolidColorBrush x:Key="ComboBoxItem.Background" Color="#b4c4d4" />
    <SolidColorBrush x:Key="ComboBoxItem.IsMouseOver.Background" Color="#bee0ec" />
    <SolidColorBrush x:Key="ComboBoxItem.IsMouseOver.Foreground" Color="Black" />
    <SolidColorBrush x:Key="ComboBoxItem.Border" Color="#b4c4d4" />
    <SolidColorBrush x:Key="ComboBoxItem.IsMouseOver.Border" Color="#bee0ec" />
    <SolidColorBrush x:Key="TextBox.Toggle.Foreground" Color="#575d7a" />
    <SolidColorBrush x:Key="TextBox.Toggle.IsMouseOver.Foreground" Color="#abaebd" />
    <SolidColorBrush x:Key="TextBox.Toggle.IsChecked.Foreground" Color="Black" />
    <SolidColorBrush x:Key="TextBox.Toggle.IsChecked.IsMouseOver.Foreground" Color="#dddfe4" />
    <SolidColorBrush x:Key="CheckBox.Background" Color="#b4c4d4" />
    <Color x:Key="CheckBox.Background.Color">#b4c4d4</Color>
    <SolidColorBrush x:Key="CheckBox.IsMouseOver.Background" Color="#b4c4d4" />
    <SolidColorBrush x:Key="CheckBox.IsMouseDown.Background" Color="#b4c4d4" />
    <SolidColorBrush x:Key="CheckBox.Mark" Color="Black" />
    <SolidColorBrush x:Key="CheckBox.Foreground" Color="Black" />
    <SolidColorBrush x:Key="CheckBox.Border" Color="#b4c4d4" />
    <Color x:Key="CheckBox.Border.Color">#b4c4d4</Color>
    <SolidColorBrush x:Key="CheckBox.IsMouseOver.Border" Color="#b4c4d4" />
    <SolidColorBrush x:Key="CheckBox.IsMouseDown.Border" Color="#b4c4d4" />
    <SolidColorBrush x:Key="CheckBox.IsMouseOver.Mark" Color="Black" />
    <SolidColorBrush x:Key="CheckBox.IsMouseDown.Mark" Color="Black" />
    <SolidColorBrush x:Key="Menu.BackgroundMenu.Background" Color="#b4c4d4" />
    <SolidColorBrush x:Key="Menu.Foreground" Color="Black" />
    <SolidColorBrush x:Key="Menu.Border" Color="#b4c4d4" />
    <SolidColorBrush x:Key="Menu.Separator" Color="#bee0ec" />
    <SolidColorBrush x:Key="MenuItem.IsMouseOver.Background" Color="#bee0ec" />
    <SolidColorBrush x:Key="MenuItem.IsMouseOver.Border" Color="#b4c4d4" />
    <SolidColorBrush x:Key="PanelRow.IsMouseOver.Background" Color="#d3eaf2" />
    <SolidColorBrush x:Key="PanelRow.IsSelected.Background" Color="#bee0ec" />
    <SolidColorBrush x:Key="ScrollBar.Background" Color="#E8E8EC" />
    <SolidColorBrush x:Key="ScrollBar.Thumb" Color="#D0D1D7" />
    <SolidColorBrush x:Key="ScrollBar.Thumb.IsMouseOver" Color="#888888" />
    <SolidColorBrush x:Key="ScrollBar.Thumb.IsMouseDown" Color="#6A6A6A" />
    <SolidColorBrush x:Key="ScrollBar.Button.Background" Color="#E8E8EC" />
    <SolidColorBrush x:Key="ScrollBar.Button.Arrow" Color="#868998" />
    <SolidColorBrush x:Key="ScrollBar.Button.IsMouseOver.Background" Color="#E8E8EC" />
    <SolidColorBrush x:Key="ScrollBar.Button.IsMouseOver.Arrow" Color="#4195E5" />
    <SolidColorBrush x:Key="ScrollBar.Button.IsMouseDown.Background" Color="#E8E8EC" />
    <SolidColorBrush x:Key="ScrollBar.Button.IsMouseDown.Arrow" Color="#2D78C7" />
    <SolidColorBrush x:Key="Window.Background" Color="#EEEEF2" />
    <SolidColorBrush x:Key="Window.Foreground" Color="#1E1E1E" />
    <SolidColorBrush x:Key="Window.Border" Color="#9B9FB9" />
    <Color x:Key="Window.Border.Color">#9B9FB9</Color>
    <SolidColorBrush x:Key="Window.Button.Background" Color="#EEEEF2" />
    <SolidColorBrush x:Key="Window.Button.Icon" Color="#1E1E1E" />
    <SolidColorBrush x:Key="Window.Button.IsMouseOver.Background" Color="#FCFCFD" />
    <SolidColorBrush x:Key="Window.Button.IsMouseOver.Icon" Color="#006CBE" />
    <SolidColorBrush x:Key="Window.Button.IsMouseDown.Background" Color="#006CBE" />
    <SolidColorBrush x:Key="Window.Button.IsMouseDown.Icon" Color="#FFFFFF" />
    <SolidColorBrush x:Key="TreeViewItem.Icon" Color="#1E1E1E" />
    <SolidColorBrush x:Key="TreeViewItem.IsMouseOver.Icon" Color="#2D78C7" />
    <SolidColorBrush x:Key="TreeViewItem.IsSelected.Icon" Color="#FFFFFF" />
    <SolidColorBrush x:Key="TreeViewItem.IsSelected.IsMouseOver.Icon" Color="#FFFFFF" />
    <Style x:Key="MonospacedText" TargetType="{x:Type Control}">
        <Setter Property="FontFamily" Value="Consolas" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>
    <Style x:Key="NormalText" TargetType="{x:Type Control}">
        <Setter Property="FontFamily" Value="Segoe UI" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>
    <Style x:Key="MonospacedTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="Consolas" />
    </Style>
    <Style x:Key="NormalTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="Segoe UI" />
    </Style>
    <Style x:Key="IconButton" TargetType="{x:Type Button}">
        <Setter Property="Margin" Value="5,0,0,0" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="FontFamily" Value="Consolas" />
        <Setter Property="TextBlock.TextAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource IconButton.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource IconButton.Foreground}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="IsTabStop" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource IconButton.IsMouseOver.Background}"/>
                <Setter Property="Foreground" Value="{DynamicResource IconButton.IsMouseOver.Foreground}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <conv:InverseBoolConverter x:Key="InverseBoolConverter"/>
    <conv:SolidColorBrushToColorConverter x:Key="SolidColorBrushToColorConverter"/>
    <BooleanToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
    <SolidColorBrush x:Key="ListBorder" Color="#828790"/>
    <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Stroke" Color="#FF818181"/>
    <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Fill" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Stroke" Color="#FF27C7F7"/>
    <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Fill" Color="#FFCCEEFB"/>
    <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Stroke" Color="#FF262626"/>
    <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Fill" Color="#FF595959"/>
    <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Stroke" Color="#FF1CC4F7"/>
    <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Fill" Color="#FF82DFFB"/>
    <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>
    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="ScrollBar.Static.Background" Color="#F0F0F0"/>
    <SolidColorBrush x:Key="ScrollBar.Static.Border" Color="#F0F0F0"/>
    <SolidColorBrush x:Key="ScrollBar.Static.Glyph" Color="#606060"/>
    <SolidColorBrush x:Key="ScrollBar.Static.Thumb" Color="#CDCDCD"/>
    <SolidColorBrush x:Key="ScrollBar.MouseOver.Background" Color="#DADADA"/>
    <SolidColorBrush x:Key="ScrollBar.MouseOver.Border" Color="#DADADA"/>
    <SolidColorBrush x:Key="ScrollBar.MouseOver.Glyph" Color="#000000"/>
    <SolidColorBrush x:Key="ScrollBar.MouseOver.Thumb" Color="#A6A6A6"/>
    <SolidColorBrush x:Key="ScrollBar.Pressed.Background" Color="#606060"/>
    <SolidColorBrush x:Key="ScrollBar.Pressed.Border" Color="#606060"/>
    <SolidColorBrush x:Key="ScrollBar.Pressed.Thumb" Color="#606060"/>
    <SolidColorBrush x:Key="ScrollBar.Pressed.Glyph" Color="#FFFFFF"/>
    <SolidColorBrush x:Key="ScrollBar.Disabled.Background" Color="#F0F0F0"/>
    <SolidColorBrush x:Key="ScrollBar.Disabled.Border" Color="#F0F0F0"/>
    <SolidColorBrush x:Key="ScrollBar.Disabled.Glyph" Color="#BFBFBF"/>
    <Style x:Key="RepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border x:Name="border" Background="{DynamicResource ScrollBar.Button.Background}" BorderThickness="0" SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ScrollBar.Button.IsMouseOver.Background}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ScrollBar.Button.IsMouseDown.Background}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                            <Setter Property="Background" TargetName="border" Value="{DynamicResource ScrollBar.Button.Background}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarThumbVertical" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Width" Value="9" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Rectangle x:Name="rectangle" Fill="{DynamicResource ScrollBar.Thumb}" Height="{TemplateBinding Height}" SnapsToDevicePixels="True" Width="{TemplateBinding Width}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource ScrollBar.Thumb.IsMouseOver}"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="true">
                            <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource ScrollBar.Thumb.IsMouseDown}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarThumbHorizontal" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Height" Value="9" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Rectangle x:Name="rectangle" Fill="{DynamicResource ScrollBar.Thumb}" Height="{TemplateBinding Height}" SnapsToDevicePixels="True" Width="{TemplateBinding Width}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource ScrollBar.Thumb.IsMouseOver}"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="true">
                            <Setter Property="Fill" TargetName="rectangle" Value="{DynamicResource ScrollBar.Thumb.IsMouseDown}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Background" Value="{DynamicResource ScrollBar.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ScrollBar.Background}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1,0"/>
        <Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg" SnapsToDevicePixels="true" >
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                            <RowDefinition Height="0.00001*"/>
                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                        </Grid.RowDefinitions>
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.Row="1"/>
                        <RepeatButton x:Name="PART_LineUpButton" Command="{x:Static ScrollBar.LineUpCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Style="{StaticResource ScrollBarButton}">
                            <Path x:Name="ArrowTop" Data="M0,5L9,5 4.5,0z" Fill="{DynamicResource ScrollBar.Button.Arrow}" Margin="3,4,3,3" Stretch="Uniform"/>
                        </RepeatButton>
                        <Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="1">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource ScrollBarThumbVertical}"/>
                            </Track.Thumb>
                        </Track>
                        <RepeatButton x:Name="PART_LineDownButton" Command="{x:Static ScrollBar.LineDownCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="2" Style="{StaticResource ScrollBarButton}">
                            <Path x:Name="ArrowBottom" Data="M0,0L9,0 4.5,5z" Fill="{DynamicResource ScrollBar.Button.Arrow}" Margin="3,4,3,3" Stretch="Uniform"/>
                        </RepeatButton>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" Value="true"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowBottom" Value="{DynamicResource ScrollBar.Button.IsMouseDown.Arrow}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" Value="true"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" Value="true"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowTop" Value="{DynamicResource ScrollBar.Button.IsMouseDown.Arrow}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineDownButton}" Value="true"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineDownButton}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowBottom" Value="{DynamicResource ScrollBar.Button.IsMouseOver.Arrow}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineUpButton}" Value="true"/>
                                <Condition Binding="{Binding IsPressed, ElementName=PART_LineUpButton}" Value="false"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Fill" TargetName="ArrowTop" Value="{DynamicResource ScrollBar.Button.IsMouseOver.Arrow}"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="MinWidth" Value="0"/>
                <Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                <Setter Property="BorderThickness" Value="0,1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="Bg" SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                    <ColumnDefinition Width="0.00001*"/>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                </Grid.ColumnDefinitions>
                                <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.Column="1"/>
                                <RepeatButton x:Name="PART_LineLeftButton" Command="{x:Static ScrollBar.LineLeftCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Style="{StaticResource ScrollBarButton}">
                                    <Path x:Name="ArrowLeft" Data="M5,0L5,9 0,4.5z" Fill="{DynamicResource ScrollBar.Button.Arrow}" Margin="3" Stretch="Uniform"/>
                                </RepeatButton>
                                <Track x:Name="PART_Track" Grid.Column="1" IsEnabled="{TemplateBinding IsMouseOver}">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{StaticResource ScrollBarThumbHorizontal}"/>
                                    </Track.Thumb>
                                </Track>
                                <RepeatButton x:Name="PART_LineRightButton" Command="{x:Static ScrollBar.LineRightCommand}" Grid.Column="2" IsEnabled="{TemplateBinding IsMouseOver}" Style="{StaticResource ScrollBarButton}">
                                    <Path x:Name="ArrowRight" Data="M0,0L0,9 5,4.5z" Fill="{DynamicResource ScrollBar.Button.Arrow}" Margin="3" Stretch="Uniform"/>
                                </RepeatButton>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}" Value="true"/>
                                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineRightButton}" Value="true"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowRight" Value="{DynamicResource ScrollBar.Button.IsMouseDown.Arrow}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}" Value="true"/>
                                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}" Value="true"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowLeft" Value="{DynamicResource ScrollBar.Button.IsMouseDown.Arrow}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineRightButton}" Value="true"/>
                                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineRightButton}" Value="false"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowRight" Value="{DynamicResource ScrollBar.Button.IsMouseOver.Arrow}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, ElementName=PART_LineLeftButton}" Value="true"/>
                                        <Condition Binding="{Binding IsPressed, ElementName=PART_LineLeftButton}" Value="false"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Fill" TargetName="ArrowLeft" Value="{DynamicResource ScrollBar.Button.IsMouseOver.Arrow}"/>
                                </MultiDataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Rectangle x:Name="Corner" Grid.Column="1" Fill="{DynamicResource Background}" Grid.Row="1"/>
                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanHorizontallyScroll="False" ContentTemplate="{TemplateBinding ContentTemplate}" CanVerticallyScroll="False" Grid.Column="0" Content="{TemplateBinding Content}" CanContentScroll="{TemplateBinding CanContentScroll}" Margin="{TemplateBinding Padding}" Grid.Row="0"/>
                        <ScrollBar x:Name="PART_VerticalScrollBar" AutomationProperties.AutomationId="VerticalScrollBar" Cursor="Arrow" Grid.Column="1" Maximum="{TemplateBinding ScrollableHeight}" Minimum="0" Grid.Row="0" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                        <ScrollBar x:Name="PART_HorizontalScrollBar" AutomationProperties.AutomationId="HorizontalScrollBar" Cursor="Arrow" Grid.Column="0" Maximum="{TemplateBinding ScrollableWidth}" Minimum="0" Orientation="Horizontal" Grid.Row="1" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Background" Value="{DynamicResource TreeViewItem.Icon}" />
        <Setter Property="Foreground" Value="{DynamicResource TreeViewItem.Icon}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="Transparent" Height="16" Padding="5,5,5,5" Width="16">
                        <Path x:Name="ExpandPath" Data="{StaticResource TreeArrow}" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding Foreground}">
                            <Path.RenderTransform>
                                <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--<MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{DynamicResource ComboBox.Background}"/>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{DynamicResource ComboBox.Background}"/>
                        </MultiTrigger>-->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="RenderTransform" TargetName="ExpandPath">
                                <Setter.Value>
                                    <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Background" Value="Transparent" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TreeViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SomeTreeViewItem" TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type TreeView}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type TreeView}}}"/>
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Padding" Value="20,0,0,0"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Focusable" Value="{Binding Focusable, RelativeSource={RelativeSource AncestorType={x:Type TreeView}}}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid HorizontalAlignment="Stretch">
                        <Grid.ColumnDefinitions>
                            <!--<ColumnDefinition MinWidth="19" Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>-->
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.Column="0" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true" >
                            <ContentPresenter x:Name="PART_Header" ContentSource="Header" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Grid.ColumnSpan="2" />
                        </Border>
                        <ToggleButton x:Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ExpandCollapseToggleStyle}"/>
                        <Border BorderThickness="0" Focusable="False" Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="1">
                            <ItemsPresenter x:Name="ItemsHost"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                        </Trigger>
                        <!--<Trigger Property="IsMouseOver" Value="true" SourceName="Bd">
                            <Setter Property="Background" Value="{DynamicResource Result.IsMouseOver.Background}"/>
                        </Trigger>-->
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                            <Setter Property="Padding" Value="0,0,0,0"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsChecked, ElementName=Expander}" Value="False"/>
                                <Condition Binding="{Binding IsMouseOver, ElementName=Expander}" Value="True"/>
                                <Condition Binding="{Binding Path=IsSelected}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Foreground" TargetName="Expander" Value="{DynamicResource TreeViewItem.IsMouseOver.Icon}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsChecked, ElementName=Expander}" Value="True"/>
                                <Condition Binding="{Binding IsMouseOver, ElementName=Expander}" Value="True"/>
                                <Condition Binding="{Binding Path=IsSelected}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="Expander" Value="{DynamicResource TreeViewItem.IsMouseOver.Icon}"/>
                            <Setter Property="Foreground" TargetName="Expander" Value="{DynamicResource TreeViewItem.IsMouseOver.Icon}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsChecked, ElementName=Expander}" Value="True"/>
                                <Condition Binding="{Binding IsMouseOver, ElementName=Expander}" Value="True"/>
                                <Condition Binding="{Binding Path=IsSelected}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="Expander" Value="Transparent"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsChecked, ElementName=Expander}" Value="False"/>
                                <Condition Binding="{Binding IsMouseOver, ElementName=Expander}" Value="True"/>
                                <Condition Binding="{Binding Path=IsSelected}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="Expander" Value="{DynamicResource TreeViewItem.Icon}"/>
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding IsMouseOver, ElementName=PART_Header}" Value="True">
                            <Setter Property="Background" Value="{DynamicResource Result.IsMouseOver.Background}" TargetName="Bd"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=IsSelected}" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource Result.IsSelected.Background}"/>
                        </DataTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <!--<Condition Property="IsSelectionActive" Value="false"/>-->
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource Result.IsSelected.Background}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <!--<Condition Binding="{Binding IsChecked, ElementName=Expander}" Value="False"/>
                                <Condition Binding="{Binding IsMouseOver, ElementName=Expander}" Value="True"/>-->
                                <Condition Binding="{Binding Path=IsSelected}" Value="True"/>
                                <Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <Condition Binding="{Binding Focusable, RelativeSource={RelativeSource Self}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource Result.IsSelected.IsInactive.Background}" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!--<DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=TreeViewItem}}" Value="True">
                <Setter Property="Background" Value="Pink"/>
            </DataTrigger>-->
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type TreeView}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{StaticResource ListBorder}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />
        <Setter Property="VirtualizingStackPanel.ScrollUnit" Value="Item" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeView}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true" HorizontalAlignment="Stretch">
                        <ScrollViewer x:Name="TreeViewScrollViewer" HorizontalAlignment="Stretch" Background="{TemplateBinding Background}" CanContentScroll="True" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}" Focusable="{TemplateBinding Focusable}">
                            <ItemsPresenter HorizontalAlignment="Stretch"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <VirtualizingStackPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Foreground" Value="{DynamicResource ComboBox.Foreground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <chrome:ButtonChrome x:Name="Chrome" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="0" RenderNormal="false" RenderPressed="{Binding IsPressed, ElementName=PART_DropDownButton}" RenderEnabled="{TemplateBinding IsEnabled}" RenderMouseOver="{Binding IsMouseOver, ElementName=PART_DropDownButton}" SnapsToDevicePixels="true">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                            </Grid.ColumnDefinitions>
                            <TextBox x:Name="TextBox" Background="Transparent" BorderThickness="0" Cursor="Arrow" Foreground="{TemplateBinding Foreground}" Focusable="false" HorizontalScrollBarVisibility="Hidden" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="true" IsTabStop="{TemplateBinding IsTabStop}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Text="{Binding Content, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" VerticalScrollBarVisibility="Hidden"/>
                            <Grid Grid.Column="1" HorizontalAlignment="Right" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                <Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 8 4 L 4 0 L 0 4 Z" Fill="{TemplateBinding Foreground}" />
                            </Grid>
                        </Grid>
                    </chrome:ButtonChrome>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="RenderPressed" TargetName="Chrome" Value="true"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="Arrow" Value="#AFAFAF"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type local:CheckComboBox}}}" Value="True">
                            <Setter Property="IsReadOnly" TargetName="TextBox" Value="false"/>
                            <Setter Property="Focusable" TargetName="TextBox" Value="true"/>
                            <Setter Property="Cursor" TargetName="TextBox" Value="{x:Null}"/>
                            <Setter Property="IsTabStop" Value="true"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type local:CheckComboBox}}}" Value="True"/>
                                <Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource AncestorType={x:Type local:CheckComboBox}}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="FocusManager.FocusedElement" TargetName="TextBox" Value="{Binding ElementName=TextBox}"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type local:CheckComboBox}">
        <Setter Property="Foreground" Value="{DynamicResource ComboBox.Foreground}"/>
        <Setter Property="Background" Value="{DynamicResource ComboBox.Background}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ComboBox.Border}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Margin" Value="5,0,0,0" />
        <Setter Property="Height" Value="20" />
        <Setter Property="Padding" Value="2"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Background" Value="{DynamicResource ComboBox.Background}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CheckComboBox}">
                    <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
                        <Popup x:Name="PART_Popup" AllowsTransparency="true" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" Placement="Top" PopupAnimation="None" StaysOpen="false">
                            <Grid>
                                <Border x:Name="DropDownBorder" Background="{DynamicResource ComboBox.Background}" BorderThickness="1" BorderBrush="{DynamicResource ComboBox.Popup.Border}" MaxHeight="{Binding MaxDropDownHeight, RelativeSource={RelativeSource TemplatedParent}}" Margin="0,0,0,1">
                                    <ScrollViewer x:Name="DropDownScrollViewer">
                                        <Grid>
                                            <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=DropDownBorder}" />
                                            </Canvas>
                                            <StackPanel>
                                                <prim:SelectAllSelectorItem x:Name="PART_SelectAllSelectorItem" Content="{TemplateBinding SelectAllContent}" Visibility="{Binding IsSelectAllActive, Converter={StaticResource BoolToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                <ItemsPresenter x:Name="PART_ItemsPresenter" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                            </StackPanel>
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </Grid>
                        </Popup>
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"/>
                        <ToggleButton x:Name="PART_DropDownButton" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" Content="{Binding Text, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Focusable="false" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="{Binding IsDropDownOpen, Converter={StaticResource InverseBoolConverter}, RelativeSource={RelativeSource TemplatedParent}}" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Padding="{TemplateBinding Padding}" Style="{StaticResource ComboBoxToggleButton}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{DynamicResource ComboBox.IsMouseOver.Background}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ComboBox.IsMouseOver.Border}"/>
            </Trigger>
            <!--<Trigger Property="IsKeyboardFocusWithin" Value="true">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:ResourceKeys.ControlSelectedBorderKey}}"/>
            </Trigger>-->
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="AnotherCheckBox" TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Foreground" Value="{DynamicResource CheckBox.Foreground}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border" Margin="0" Width="16" Height="10" CornerRadius="0" BorderThickness="0" Background="{TemplateBinding Background}">
                                <Grid>
                                    <Path Visibility="Collapsed" Width="9" Height="8" x:Name="CheckMark" SnapsToDevicePixels="False" StrokeThickness="0" Stroke="{x:Null}" Data="M6.22,11.02C6.22,11.02 2.5,7.24 2.5,7.24 2.5,7.24 4.05,5.71 4.05,5.71 4.05,5.71 5.97,7.65 5.97,7.65 5.97,7.65 10.52,1.38 10.52,1.38 10.52,1.38 13.19,1.38 13.19,1.38 13.19,1.38 6.22,11.02 6.22,11.02 6.22,11.02 6.22,11.02 6.22,11.02z" Margin="0" Fill="{DynamicResource CheckBox.IsMouseOver.Mark}" Stretch="Fill"/>
                                    <Path Visibility="Collapsed" Width="7" Height="7" x:Name="InderminateMark" SnapsToDevicePixels="False" StrokeThickness="2" Stroke="{DynamicResource CheckBox.Mark}" Data="M 0 7 L 7 0" />
                                </Grid>
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="0,0,5,0" VerticalAlignment="Center" HorizontalAlignment="Left" RecognizesAccessKey="True" />
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ComboboxItem.IsMouseOver.Background}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type prim:SelectorItem}">
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type prim:Selector}}}" />
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment,RelativeSource={RelativeSource AncestorType={x:Type prim:Selector}}}" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Height" Value="22"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource ComboBoxItem.Border}" />
        <Setter Property="Background" Value="{DynamicResource ComboBoxItem.Background}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type prim:SelectorItem}">
                    <Border x:Name="_background" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Margin="0" Padding="0">
                        <CheckBox x:Name="_checkBox" IsChecked="{Binding IsSelected, RelativeSource={RelativeSource TemplatedParent}}" Padding="{TemplateBinding Padding}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Style="{DynamicResource AnotherCheckBox}" Margin="0">
                            <CheckBox.Content>
                                <ContentControl Margin="0" Padding="0" Content="{TemplateBinding Content}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" ContentTemplate="{TemplateBinding ContentTemplate}" Foreground="{TemplateBinding Foreground}" Focusable="False" />
                            </CheckBox.Content>
                        </CheckBox>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="_background" Property="Background" Value="{DynamicResource ComboBoxItem.IsMouseOver.Background}" />
                            <Setter TargetName="_background" Property="BorderBrush" Value="{DynamicResource ComboBoxItem.IsMouseOver.Border}" />
                        </Trigger>
                        <!--<Trigger Property="IsKeyboardFocusWithin" Value="true">
                            <Setter TargetName="_background" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                            <Setter TargetName="_checkBox" Property="FocusManager.FocusedElement" Value="{Binding ElementName=_checkBox}" />
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="SomeTextBoxStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource NormalText}">
        <Setter Property="BorderBrush" Value="{DynamicResource Border}" />
        <Setter Property="SelectionBrush" Value="{DynamicResource Selection}" />
        <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
        <Setter Property="Background" Value="{DynamicResource TextBox.Background}" />
        <Setter Property="CaretBrush" Value="{DynamicResource Foreground}" />
        <Setter Property="Padding" Value="2" />
        <Setter Property="Height" Value="24" />
        <Setter Property="Padding" Value="3,2,3,1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" MouseEnter="PART_ContentHost_MouseEnter" MouseLeave="PART_ContentHost_MouseLeave" LostFocus="PART_ContentHost_LostFocus" GotFocus="PART_ContentHost_GotFocus" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Border.IsSelected}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Border.IsMouseOver}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource Border.IsMouseOver}"/>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource Border.IsSelected}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type Button}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Background" Value="{DynamicResource Button.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource Button.Foreground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Button.Border}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border TextBlock.Foreground="{TemplateBinding Foreground}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" x:Name="Border" CornerRadius="0" BorderThickness="1" Padding="5,0">
                        <ContentPresenter Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource Button.IsMouseOver.Background}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource Button.IsMouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource Button.IsMouseDown.Background}"/>
                <Setter Property="Foreground" Value="{DynamicResource Button.IsMouseDown.Foreground}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Button.IsMouseDown.Border}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource Button.IsDisabled.Background}"/>
                <Setter Property="Foreground" Value="{DynamicResource Button.IsDisabled.Foreground}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource Button.IsDisabled.Border}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}" />
    </ControlTemplate>
    <Style x:Key="ComboBoxToggle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{DynamicResource ComboBox.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource ComboBox.Foreground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ComboBox.Border}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="13" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="Border" Grid.ColumnSpan="2" CornerRadius="0" BorderThickness="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"/>
                        <Border x:Name="BorderHeader" Grid.Column="0" CornerRadius="0" BorderThickness="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"/>
                        <Grid Width="6" Height="3" Grid.Column="1" Margin="-1,0,0,0">
                            <Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 4 4 L 8 0 Z" Fill="{DynamicResource ComboBox.Arrow}" Stretch="Fill"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" Value="{DynamicResource ComboBox.IsDisabled.Arrow}" TargetName="Arrow"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource ComboBox.IsMouseOver.Background}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ComboBox.IsMouseOver.Border}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Foreground" Value="{DynamicResource ComboBox.Foreground}" />
        <Setter Property="Background" Value="{DynamicResource ComboBox.Background}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Height" Value="22"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton x:Name="ToggleButton" Style="{DynamicResource ComboBoxToggle}" Grid.Column="2" Focusable="false" ClickMode="Press" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <ContentPresenter x:Name="ContentSite" IsHitTestVisible="False" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Margin="3,3,23,3" VerticalAlignment="Stretch" HorizontalAlignment="Left"/>
                        <TextBox x:Name="PART_EditableTextBox" Style="{x:Null}" Template="{StaticResource ComboBoxTextBox}" HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="3,5,23,3" Focusable="True" Background="Transparent" Visibility="Hidden" IsReadOnly="{TemplateBinding IsReadOnly}" />
                        <Popup x:Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="None">
                            <Grid x:Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border x:Name="DropDownBorder" Margin="0,1,0,0" BorderThickness="1" BorderBrush="{DynamicResource ComboBox.Popup.Border}" Background="{TemplateBinding Background}"/>
                                <ScrollViewer Margin="1,2,1,1" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Foreground" Value="{DynamicResource ComboBox.Foreground}"/>
        <Setter Property="Background" Value="{DynamicResource ComboBoxItem.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ComboBoxItem.Border}"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Border" Padding="2" SnapsToDevicePixels="true" Background="{TemplateBinding Background}" BorderThickness="1" BorderBrush="{TemplateBinding BorderBrush}">
                        <ContentPresenter />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource ComboBoxItem.IsMouseOver.Background}"/>
                <Setter Property="Foreground" Value="{DynamicResource ComboBoxItem.IsMouseOver.Foreground}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ComboBoxItem.IsMouseOver.Border}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="TextBoxToggle" TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Foreground" Value="{DynamicResource TextBox.Toggle.Foreground}" />
        <Setter Property="Margin" Value="5,0,0,0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Height" Value="20" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator Background="Transparent">
                        <Border x:Name="_background" BorderThickness="0,0,0,1" BorderBrush="{x:Null}" Margin="4,2,0,1">
                            <ContentPresenter Margin="0" VerticalAlignment="Center" HorizontalAlignment="Left" RecognizesAccessKey="True" />
                        </Border>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsChecked" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{DynamicResource TextBox.Toggle.IsChecked.IsMouseOver.Foreground}" TargetName="_background" />
                            <Setter Property="Foreground" Value="{DynamicResource TextBox.Toggle.IsChecked.IsMouseOver.Foreground}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource TextBox.Toggle.IsMouseOver.Foreground}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="False" />
                                <Condition Property="IsChecked" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="BorderBrush" Value="{DynamicResource TextBox.Toggle.IsChecked.Foreground}" TargetName="_background" />
                            <Setter Property="Foreground" Value="{DynamicResource TextBox.Toggle.IsChecked.Foreground}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>
    <Style x:Key="SomeCheckBox" TargetType="{x:Type CheckBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Foreground" Value="{DynamicResource CheckBox.Foreground}" />
        <Setter Property="Background" Value="{DynamicResource CheckBox.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource CheckBox.Border}" />
        <Setter Property="Margin" Value="5,6,0,4" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Height" Value="16" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Width" Value="Auto" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Grid>
                                <Border x:Name="Border" Width="14" Height="14" CornerRadius="0" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}">
                                </Border>
                                <Grid>
                                    <Path Visibility="Collapsed" Width="8" Height="8" x:Name="CheckMark" SnapsToDevicePixels="False" StrokeThickness="0" Stroke="{x:Null}" Data="M6.22,11.02C6.22,11.02 2.5,7.24 2.5,7.24 2.5,7.24 4.05,5.71 4.05,5.71 4.05,5.71 5.97,7.65 5.97,7.65 5.97,7.65 10.52,1.38 10.52,1.38 10.52,1.38 13.19,1.38 13.19,1.38 13.19,1.38 6.22,11.02 6.22,11.02 6.22,11.02 6.22,11.02 6.22,11.02z" Margin="0" Fill="{DynamicResource CheckBox.Mark}" Stretch="Fill"/>
                                    <Path Visibility="Collapsed" Width="7" Height="7" x:Name="InderminateMark" SnapsToDevicePixels="False" StrokeThickness="2" Stroke="{DynamicResource CheckBox.Mark}" Data="M 0 7 L 7 0" />
                                </Grid>
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="4,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Left" RecognizesAccessKey="True" />
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource CheckBox.IsMouseOver.Background}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource CheckBox.IsMouseOver.Border}" />
                            <Setter Property="Fill" TargetName="CheckMark" Value="{DynamicResource CheckBox.IsMouseOver.Mark}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="{DynamicResource CheckBox.IsMouseDown.Background}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource CheckBox.IsMouseDown.Border}" />
                            <Setter Property="Fill" TargetName="CheckMark" Value="{DynamicResource CheckBox.IsMouseDown.Mark}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Grid}">
        <Setter Property="Background" Value="{DynamicResource Background}" />
    </Style>
    <Style x:Key="SomeHintLabel" TargetType="{x:Type Label}" BasedOn="{StaticResource NormalText}">
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Height" Value="24" />
        <Setter Property="Background" Value="{DynamicResource TextBox.Hint.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBox.Hint.Foreground}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="8,0,0,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>
    <Style x:Key="SomeHintLabel2" TargetType="{x:Type Label}" BasedOn="{StaticResource NormalText}">
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Background" Value="{DynamicResource TextBox.Hint.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource TextBox.Hint.Foreground}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Padding" Value="8,0,0,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontSize" Value="24" />
    </Style>
    <Style x:Key="ResultPanel" TargetType="{x:Type DockPanel}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Height" Value="16" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <Style x:Key="ResultSeparator" TargetType="{x:Type Border}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Width" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource Result.File.Foreground}" />
        <Setter Property="Opacity" Value="0.3" />
    </Style>
    <Style x:Key="Result" TargetType="TextBlock" BasedOn="{StaticResource MonospacedTextBlock}">
        <Setter Property="Margin" Value="0,0,0,0" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <Style x:Key="ResultFile" TargetType="TextBlock" BasedOn="{StaticResource Result}">
        <Setter Property="Margin" Value="5,0,0,0" />
        <Setter Property="Foreground" Value="{DynamicResource Result.File.Foreground}" />
        <Setter Property="FontWeight" Value="Bold" />
    </Style>
    <Style x:Key="ResultLine" TargetType="TextBlock" BasedOn="{StaticResource Result}">
        <Setter Property="Margin" Value="5,0,5,0" />
        <Setter Property="Width" Value="40" />
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="Foreground" Value="{DynamicResource Result.File.Foreground}" />
        <Setter Property="FontWeight" Value="Bold" />
    </Style>
    <Style x:Key="ResultText" TargetType="TextBlock" BasedOn="{StaticResource Result}">
        <Setter Property="Foreground" Value="{DynamicResource Result.Text.Foreground}" />
    </Style>
    <Style x:Key="ResultHighlightedText" TargetType="TextBlock" BasedOn="{StaticResource Result}">
        <Setter Property="Foreground" Value="{DynamicResource Result.Highlight.Foreground}"/>
        <Setter Property="Background" Value="{DynamicResource Result.Highlight.Background}" />
        <Setter Property="FontWeight" Value="Bold" />
    </Style>
    <Style x:Key="ResultsListBox" TargetType="{x:Type ListBox}">
        <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border BorderThickness="{TemplateBinding Border.BorderThickness}" Padding="{TemplateBinding Control.Padding}" BorderBrush="{TemplateBinding Border.BorderBrush}" Background="{TemplateBinding Panel.Background}" SnapsToDevicePixels="True">
                        <ScrollViewer Name="SearchScrollbar" Padding="{TemplateBinding Control.Padding}" Focusable="{TemplateBinding Focusable}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ListBoxItem}">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="Height" Value="16" />
                    <Setter Property="VerticalAlignment" Value="Center" />
                    <Setter Property="IsSelected" Value="{Binding Path=IsSelected, Mode=TwoWay}" />
                    <Setter Property="FocusVisualStyle" Value="{x:Null}" />
                    <Setter Property="Focusable" Value="{Binding Focusable, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                <Grid>
                                    <Border Background="{TemplateBinding Background}" PreviewKeyDown="ListBoxItem_PreviewKeyDown">
                                        <ContentPresenter Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" />
                                    </Border>
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource Result.IsMouseOver.Background}"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=IsSelected}" Value="True">
                            <Setter Property="Background" Value="{DynamicResource Result.IsSelected.Background}"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <!--<Condition Binding="{Binding IsChecked, ElementName=Expander}" Value="False"/>
                                <Condition Binding="{Binding IsMouseOver, ElementName=Expander}" Value="True"/>-->
                                <Condition Binding="{Binding Path=IsSelected}" Value="True"/>
                                <Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource Self}}" Value="False"/>
                                <!--<Condition Binding="{Binding Focusable, RelativeSource={RelativeSource Self}}" Value="True"/>-->
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource Result.IsSelected.IsInactive.Background}" />
                        </MultiDataTrigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="OverlayBorder" TargetType="Border">
        <Setter Property="Background" Value="{DynamicResource Overlay.Background}" />
    </Style>
    <Style TargetType="TextBlock" BasedOn="{StaticResource NormalTextBlock}">
    </Style>
    <Style x:Key="OverlayText" TargetType="TextBlock" BasedOn="{StaticResource NormalTextBlock}">
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
    </Style>
    <Style x:Key="HoverableRow" TargetType="{x:Type Grid}">
        <Setter Property="Background" Value="Transparent"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource PanelRow.IsMouseOver.Background}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="SelectableRow" TargetType="{x:Type Grid}" BasedOn="{StaticResource HoverableRow}">
        <Setter Property="Background" Value="Transparent"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=IsSelected}" Value="True">
                <Setter Property="Background" Value="{DynamicResource PanelRow.IsSelected.Background}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ZIndexFocusable" TargetType="{x:Type FrameworkElement}">
        <Setter Property="Panel.ZIndex" Value="0" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Panel.ZIndex" Value="2" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="False" />
                    <Condition Property="IsKeyboardFocusWithin" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Panel.ZIndex" Value="1" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="SomeBorderStyle" TargetType="{x:Type Border}" BasedOn="{StaticResource ZIndexFocusable}">
        <Setter Property="BorderBrush" Value="{DynamicResource Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource Border.IsMouseOver}"/>
                <Setter Property="Tag" Value="True" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="PanelEntry" TargetType="Label" BasedOn="{StaticResource NormalText}">
        <Setter Property="FontSize" Value="12" />
        <Setter Property="BorderBrush" Value="{DynamicResource Border}" />
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="5,0,5,0" />
    </Style>
    <Style x:Key="PanelEntryFirst" TargetType="Label" BasedOn="{StaticResource PanelEntry}">
        <Setter Property="Foreground" Value="{DynamicResource Result.File.Foreground}" />
    </Style>
    <Style x:Key="PanelEntrySecond" TargetType="Label" BasedOn="{StaticResource PanelEntry}">
        <Setter Property="Foreground" Value="{DynamicResource Result.Text.Foreground}" />
    </Style>
    <Style x:Key="SettingsLabel" TargetType="Label" BasedOn="{StaticResource NormalText}">
        <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="Padding" Value="0" />
    </Style>

    <ControlTemplate x:Key="ComboboxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid Background="{Binding Background,RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="35" />
            </Grid.ColumnDefinitions>
            <Border x:Name="Border" Grid.ColumnSpan="2" Background="Transparent"  BorderBrush="Black" BorderThickness="{Binding BorderThickness,RelativeSource={RelativeSource TemplatedParent}}"/>
            <Path x:Name="Arrow" Grid.Column="1" Opacity="1" Stroke="Black" StrokeThickness="1.5" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 6 6 L 12 0" />
            <Path x:Name="Arrow_checked" Opacity="0" Grid.Column="1" Fill="Black" Stroke="Black" StrokeThickness="1" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 6 6 L 12 0 Z" />
            <ContentPresenter TextElement.FontFamily="Segoe Ui Dark" TextElement.FontSize="18" TextElement.Foreground="Black" VerticalAlignment="Center"  Grid.Column="0" Margin="10,0,0,0" HorizontalAlignment="Left" RecognizesAccessKey="True" SnapsToDevicePixels="True" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsMouseOver" Value="true">
                <Setter TargetName="Border" Property="Background" Value="Gray" />
                <Setter TargetName="Border" Property="BorderThickness" Value="1.2" />
            </Trigger>
            <Trigger Property="IsChecked" Value="False">
                <Setter Property="Opacity" Value="1" TargetName="Arrow"/>
                <Setter Property="Opacity" Value="0" TargetName="Arrow_checked"/>
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="true">
                <Setter Property="Opacity" Value="0" TargetName="Arrow"/>
                <Setter Property="Opacity" Value="1" TargetName="Arrow_checked"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Border" Property="Background" Value="Gray" />
                <Setter TargetName="Border" Property="BorderBrush" Value="White" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type Expander}">
        <Setter Property="FontFamily" Value="Segoe Ui Dark"></Setter>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="MaxHeight" Value="200"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <DockPanel>
                        <ToggleButton x:Name="HeaderSite" Height="35" Background="{TemplateBinding Background}" ContentTemplate="{TemplateBinding HeaderTemplate}" ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" Content="{TemplateBinding Header}" DockPanel.Dock="Bottom" Foreground="Black"   FontStyle="{TemplateBinding FontStyle}"   FontFamily="Segoe UI Dark" 
                     IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"   Template="{StaticResource ComboboxToggleButton}" />
                        <Border  BorderThickness="0,4.5,0,0" BorderBrush="Transparent">
                            <Border x:Name="bod" BorderBrush="Transparent" SnapsToDevicePixels="True" BorderThickness="1">
                                <ContentPresenter x:Name="ExpandSite"  Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"  Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </Border>
                        </Border>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
                            <Setter Property="BorderBrush" TargetName="bod" Value="Black"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="Gray"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="itemstyle"   TargetType="{x:Type ListBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle"  Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Grid x:Name="Border"  Height="40"  SnapsToDevicePixels="true">
                        <Grid.Background>
                            <SolidColorBrush Color="Transparent" />
                        </Grid.Background>
                        <ContentPresenter Name="cmb_name" TextElement.FontFamily="Segoe Ui Dark" TextElement.FontSize="18" TextElement.Foreground="Black" Margin="10,0,0,0" VerticalAlignment="Center"></ContentPresenter>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="Gray"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FocusVisualStyle">
            <Setter.Value>
                <Style TargetType="Control">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Border BorderBrush="{DynamicResource customBlueBrush}" BorderThickness="1" Margin="1,2,2,2" >
                                    <Rectangle Fill="{DynamicResource customBlueBrush}" Opacity="0.1"></Rectangle>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ContextMenu}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Grid.IsSharedSizeScope" Value="true" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="Background" Value="{DynamicResource Menu.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource Menu.Foreground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Menu.Border}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border Background="{TemplateBinding Background}" BorderThickness="10" Margin="-10,-10,0,0">
                        <Border.Effect>
                            <DropShadowEffect BlurRadius="4" ShadowDepth="2" Opacity="0.2" />
                        </Border.Effect>
                        <Border x:Name="Border" Background="{TemplateBinding Background}" BorderThickness="1" Padding="2" BorderBrush="{TemplateBinding BorderBrush}">
                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="PopupContentStyle" TargetType="{x:Type ContentControl}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Grid.IsSharedSizeScope" Value="true" />
        <Setter Property="Background" Value="{DynamicResource Menu.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource Menu.Foreground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Menu.Border}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContentControl">
                    <Grid>
                        <Border Background="{TemplateBinding Background}" BorderThickness="10" Margin="-10,-10,0,0">
                            <Border.Effect>
                                <DropShadowEffect BlurRadius="4" ShadowDepth="3" Opacity="0.4" />
                            </Border.Effect>
                            <Border x:Name="Border" Background="{TemplateBinding Background}" BorderThickness="1" Padding="2" BorderBrush="{TemplateBinding BorderBrush}">
                                <ContentPresenter />
                            </Border>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
        <Setter Property="Height" Value="1" />
        <Setter Property="Margin" Value="0,2,0,2" />
        <Setter Property="Background" Value="{DynamicResource Menu.Separator}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderThickness="1">
                        <Border.BorderBrush>
                            <VisualBrush>
                                <VisualBrush.Visual>
                                    <Rectangle Stroke="{TemplateBinding Background}" StrokeThickness="1"
                  Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type Border}}, Path=ActualWidth}"
                  Height="{Binding RelativeSource={RelativeSource AncestorType={x:Type Border}}, Path=ActualHeight}"/>
                                </VisualBrush.Visual>
                            </VisualBrush>
                        </Border.BorderBrush>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" BorderThickness="1" Height="22">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                    <ColumnDefinition Width="13" />
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon" Margin="6,0,6,0" VerticalAlignment="Center" ContentSource="Icon" />
                <!--<Border x:Name="Check" Width="13" Height="13" Visibility="Collapsed" Margin="6,0,6,0" BorderThickness="0" Background="{DynamicResource ComboBox.Background}">
                    <Path x:Name="CheckMark" Width="7" Height="7" Visibility="Hidden" SnapsToDevicePixels="False" StrokeThickness="2" Data="M 0 0 L 7 7 M 0 7 L 7 0">
                        <Path.Stroke>
                            <SolidColorBrush Color="{DynamicResource GlyphColor}" />
                        </Path.Stroke>
                    </Path>
                </Border>-->
                <ContentPresenter x:Name="HeaderHost" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True" VerticalAlignment="Center" Margin="5,0,0,0" />
                <!--<TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}" DockPanel.Dock="Right" />-->
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="ButtonBase.Command" Value="{x:Null}" />
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility"
              Value="Hidden" />
            </Trigger>
            <!--<Trigger Property="IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
            </Trigger>-->
            <Trigger Property="IsCheckable" Value="true">
                <!--<Setter TargetName="Check" Property="Visibility" Value="Visible" />-->
                <Setter TargetName="Icon"
              Property="Visibility"
              Value="Hidden" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Background" TargetName="Border" Value="{DynamicResource MenuItem.IsMouseOver.Background}"/>
                <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource MenuItem.IsMouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <!--<Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="{StaticResource DisabledForegroundColor}" />
                    </Setter.Value>
                </Setter>-->
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- MenuItem Style -->
    <Style x:Key="{x:Type MenuItem}"
       TargetType="{x:Type MenuItem}">
        <Setter Property="OverridesDefaultStyle"
          Value="True" />
        <Style.Triggers>
            <!--<Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}" />
                <Setter Property="Grid.IsSharedSizeScope" Value="true" />
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}" />
            </Trigger>-->
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="WindowTitleBarButton" TargetType="Button">
        <Style.Setters>
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="Background" Value="{DynamicResource Window.Button.Background}" />
            <Setter Property="BorderBrush" Value="{DynamicResource Window.Button.Background}" />
            <Setter Property="Foreground" Value="{DynamicResource Window.Button.Icon}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ButtonBase}">
                        <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <!--<Trigger Property="Button.IsDefaulted" Value="true">
                                        <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                    </Trigger>-->
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{DynamicResource Window.Button.IsMouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Window.Button.IsMouseOver.Background}"/>
                                <Setter Property="Foreground" Value="{DynamicResource Window.Button.IsMouseOver.Icon}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{DynamicResource Window.Button.IsMouseDown.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource Window.Button.IsMouseDown.Background}"/>
                                <Setter Property="Foreground" Value="{DynamicResource Window.Button.IsMouseDown.Icon}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style.Setters>
        <Style.Triggers>
            <Trigger Property="controlzEx:NonClientControlProperties.IsNCMouseOver" Value="true">
                <Setter Property="Background" Value="{DynamicResource Window.Button.IsMouseOver.Background}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Window.Button.IsMouseOver.Background}" />
                <Setter Property="Foreground" Value="{DynamicResource Window.Button.IsMouseOver.Icon}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="{DynamicResource Window.Button.IsMouseOver.Background}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Window.Button.IsMouseOver.Background}" />
                <Setter Property="Foreground" Value="{DynamicResource Window.Button.IsMouseOver.Icon}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter Property="Background" Value="{DynamicResource Window.Button.IsMouseDown.Background}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Window.Button.IsMouseDown.Background}" />
                <Setter Property="Foreground" Value="{DynamicResource Window.Button.IsMouseDown.Icon}"/>
            </Trigger>
            <Trigger Property="controlzEx:NonClientControlProperties.IsNCPressed" Value="true">
                <Setter Property="Background" Value="{DynamicResource Window.Button.IsMouseDown.Background}" />
                <Setter Property="BorderBrush" Value="{DynamicResource Window.Button.IsMouseDown.Background}" />
                <Setter Property="Foreground" Value="{DynamicResource Window.Button.IsMouseDown.Icon}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="CloseButton" TargetType="Button" BasedOn="{StaticResource WindowTitleBarButton}">
        <Setter Property="Content">
            <Setter.Value>
                <Path Data="F1M8.583,8L13,12.424 12.424,13 8,8.583 3.576,13 3,12.424 7.417,8 3,3.576 3.576,3 8,7.417 12.424,3 13,3.576z" Fill="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}" />
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MyWindowStyle" TargetType="{x:Type controlzEx:WindowChromeWindow}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="UseRadialGradientForCorners" Value="True" />
        <Setter Property="BorderBrush" Value="{x:Null}" />
        <Setter Property="NCActiveBrush" Value="{DynamicResource Window.Background}" />
        <Setter Property="NCCurrentBrush" Value="{DynamicResource Window.Background}" />
        <Setter Property="NCNonActiveBrush" Value="{DynamicResource Window.Background}" />
        <Setter Property="GlowDepth" Value="1" />
        <Setter Property="GlowColor" Value="{DynamicResource Window.Border.Color}" />
        <Setter Property="NonActiveGlowColor" Value="{DynamicResource Window.Border.Color}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controlzEx:WindowChromeWindow}">
                    <Grid Background="{TemplateBinding Background}"
                                  Margin="{TemplateBinding Padding}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="29" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>

                            <Grid Grid.Row="0"
                  VerticalAlignment="Center"
                  controlzEx:WindowChrome.IsHitTestVisibleInChrome="False"
                  controlzEx:NonClientControlProperties.HitTestResult="CAPTION">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Border Grid.ColumnSpan="10" Background="{Binding ElementName=Window, Path=NCCurrentBrush}" />

                                <TextBlock Grid.Column="0"
                           Margin="10 7 0 0"
                           HorizontalAlignment="Left"
                           Text="{Binding ElementName=Window, Path=Title}"
                           TextTrimming="CharacterEllipsis" Foreground="{DynamicResource Window.Foreground}" />
                                <Button Grid.Column="2" Style="{DynamicResource CloseButton}"
                            Width="45"
                            Height="29"
                            controlzEx:NonClientControlProperties.HitTestResult="CLOSE"
                            controlzEx:NonClientControlProperties.ClickStrategy="MouseEvent" Click="Close_Click">
                                </Button>
                            </Grid>
                            <AdornerDecorator Grid.Row="1">
                                <ContentPresenter />
                            </AdornerDecorator>
                        </Grid>

                        <Border x:Name="PART_Border"
                                        HorizontalAlignment="Stretch"
                                        VerticalAlignment="Stretch"
                                        Background="{x:Null}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        UseLayoutRounding="True" />

                        <ResizeGrip x:Name="WindowResizeGrip"
                                            HorizontalAlignment="Right"
                                            VerticalAlignment="Bottom"
                                            IsTabStop="false"
                                            Visibility="Collapsed"
                                            controlzEx:WindowChrome.ResizeGripDirection="BottomRight" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Window.ResizeMode" Value="CanResizeWithGrip" />
                                <Condition Property="Window.WindowState" Value="Normal" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="WindowResizeGrip" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="WindowState" Value="Maximized">
                <Setter Property="Margin" Value="0" />
            </Trigger>
            <!--
                        #1823 try to fix another nasty issue
                        WindowState = Maximized
                        ResizeMode = NoResize
                    -->
            <Trigger Property="ResizeMode" Value="NoResize">
                <Setter Property="Margin" Value="0" />
            </Trigger>
            <Trigger Property="IsNCActive" Value="False">
                <Setter Property="NCCurrentBrush" Value="{Binding NCNonActiveBrush, RelativeSource={RelativeSource Self}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <DrawingBrush  x:Key="CheckerBrush" Viewport="0,0,10,10" ViewportUnits="Absolute" TileMode="Tile">
        <DrawingBrush.Drawing>
            <DrawingGroup>
                <GeometryDrawing Brush="White">
                    <GeometryDrawing.Geometry>
                        <RectangleGeometry Rect="0,0 100,100" />
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
                <GeometryDrawing Brush="LightGray">
                    <GeometryDrawing.Geometry>
                        <GeometryGroup>
                            <RectangleGeometry Rect="0,0 50,50" />
                            <RectangleGeometry Rect="50,50 50,50" />
                        </GeometryGroup>
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
            </DrawingGroup>
        </DrawingBrush.Drawing>
    </DrawingBrush>

    <SolidColorBrush x:Key="ButtonHover"
                   Color="#C2E0FF" />
    <SolidColorBrush x:Key="ButtonHoverBorder"
                   Color="#3399FF" />
    <SolidColorBrush x:Key="ButtonChecked"
                   Color="#E6F0FA" />
    <SolidColorBrush x:Key="ButtonPressed"
                   Color="#99CCFF" />
    <SolidColorBrush x:Key="ButtonPressedBorder"
                   Color="#3399FF" />

    <!-- =============================================================================== -->
    <!-- ColorPicker                                                                     -->
    <!-- =============================================================================== -->


    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <conv:ColorToSolidColorBrushConverter x:Key="ColorToSolidColorBrushConverter" />
    <conv:AdditionConverter x:Key="AdditionConverter" />
    <conv:ColorModeToTabItemSelectedConverter x:Key="ColorModeToTabItemSelectedConverter" />

    <LinearGradientBrush x:Key="ColorPickerDarkBorderBrush"
                       EndPoint="0.5,1"
                       StartPoint="0.5,0">
        <GradientStop Color="#FFA3AEB9"
                  Offset="0" />
        <GradientStop Color="#FF8399A9"
                  Offset="0.375" />
        <GradientStop Color="#FF718597"
                  Offset="0.375" />
        <GradientStop Color="#FF617584"
                  Offset="1" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="ColorCanvasBackgroundBrush"
                       StartPoint="0,0"
                       EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Offset="0"
                      Color="#FFffffff" />
                <GradientStop Offset="1"
                      Color="#FFE8EBED" />
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="ThumbStroke"
                       EndPoint="0.5,1"
                       StartPoint="0.5,0">
        <GradientStop Color="#FFA3AEB9"
                  Offset="0" />
        <GradientStop Color="#FF8399A9"
                  Offset="0.375" />
        <GradientStop Color="#FF718597"
                  Offset="0.375" />
        <GradientStop Color="#FF617584"
                  Offset="1" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="ThumbFill"
                       StartPoint="0,0"
                       EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Offset="0"
                      Color="#FFfefefe" />
                <GradientStop Offset="0.5"
                      Color="#FFeff1f2" />
                <GradientStop Offset="1"
                      Color="#FFd0d6db" />
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="ThumbMouseOver"
                   Color="#FFE5F2F6" />

    <SolidColorBrush x:Key="HorizontalSliderTrackNormalBackground"
                   Color="{DynamicResource ComboBox.Background.Color}" />

    <LinearGradientBrush x:Key="HorizontalSliderTrackNormalBorder"
                       EndPoint="0,1"
                       StartPoint="0,0">
        <GradientStop Color="{DynamicResource CheckBox.Background.Color}"
                  Offset="-0.3" />
        <GradientStop Color="{DynamicResource CheckBox.Border.Color}"
                  Offset="1.5" />
    </LinearGradientBrush>

    <Style x:Key="ColorCanvasTextBoxStyle" TargetType="TextBox" BasedOn="{StaticResource SomeTextBoxStyle}">
        <Style.Setters>
            <Setter Property="Height" Value="22" />
        </Style.Setters>
    </Style>

    <Style x:Key="SliderRepeatButtonStyle"
         TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle"
            Value="true" />
        <Setter Property="IsTabStop"
            Value="false" />
        <Setter Property="Focusable"
            Value="false" />
        <Setter Property="Background"
            Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="{TemplateBinding Background}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CustomThumbForSlider"
         TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle"
            Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Rectangle x:Name="_thumb"
                     Fill="{DynamicResource CheckBox.Background}"
                     Stroke="{DynamicResource CheckBox.Border}"
                     Height="14"
                     Width="8"
                     RadiusX="1"
                     RadiusY="1" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="_thumb" Property="Rectangle.Fill" Value="{DynamicResource CheckBox.IsMouseDown.Background}" />
                            <Setter TargetName="_thumb" Property="Rectangle.Stroke" Value="{DynamicResource CheckBox.IsMouseDown.Border}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="VerticalSlideThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Focusable"
            Value="false" />
        <Setter Property="OverridesDefaultStyle"
            Value="true" />
        <Setter Property="Height"
            Value="12" />
        <Setter Property="Width"
            Value="15" />
        <Setter Property="Foreground"
            Value="Gray" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Canvas SnapsToDevicePixels="true"
                  Background="Transparent">
                        <Path x:Name="LeftArrow" Stretch="Fill" StrokeLineJoin="Round" Stroke="{DynamicResource CheckBox.Border}" Fill="{DynamicResource CheckBox.Background}" Data="F1 M 276.761,316L 262.619,307.835L 262.619,324.165L 276.761,316 Z " RenderTransformOrigin="0.5,0.5" Width="6" Height="8">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <TranslateTransform Y="6" />
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                        <Path x:Name="RightArrow" Stretch="Fill" StrokeLineJoin="Round" Stroke="{DynamicResource CheckBox.Border}" Fill="{DynamicResource CheckBox.Background}" Data="F1 M 276.761,316L 262.619,307.835L 262.619,324.165L 276.761,316 Z " RenderTransformOrigin="0.5,0.5" Width="6" Height="8">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <RotateTransform Angle="-180" />
                                    <TranslateTransform Y="6"
                                      X="9" />
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                    </Canvas>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ColorCanvasSliderStyle" TargetType="{x:Type Slider}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Slider}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Background="{TemplateBinding Background}"
                  SnapsToDevicePixels="true">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto"
                               MinHeight="{TemplateBinding MinHeight}" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <TickBar x:Name="TopTick"
                       Fill="{TemplateBinding Foreground}"
                       Height="4"
                       Placement="Top"
                       Grid.Row="0"
                       Visibility="Collapsed" />
                            <TickBar x:Name="BottomTick"
                       Fill="{TemplateBinding Foreground}"
                       Height="4"
                       Placement="Bottom"
                       Grid.Row="2"
                       Visibility="Collapsed" />
                            <Border x:Name="TrackBackground"
                      BorderBrush="{DynamicResource HorizontalSliderTrackNormalBorder}"
                      BorderThickness="1"
                      Background="{DynamicResource HorizontalSliderTrackNormalBackground}"
                      CornerRadius="1"
                      Height="4.0"
                      Margin="5,0"
                      Grid.Row="1"
                      VerticalAlignment="center">
                                <Canvas Margin="-6,-1">
                                    <Rectangle x:Name="PART_SelectionRange"
                             Fill="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"
                             Height="4.0"
                             Stroke="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}"
                             StrokeThickness="1.0"
                             Visibility="Hidden" />
                                </Canvas>
                            </Border>
                            <Track x:Name="PART_Track"
                     Grid.Row="1">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Command="{x:Static Slider.DecreaseLarge}"
                                Style="{StaticResource SliderRepeatButtonStyle}" >
                                    </RepeatButton>
                                </Track.DecreaseRepeatButton>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Command="{x:Static Slider.IncreaseLarge}"
                                Style="{StaticResource SliderRepeatButtonStyle}" >
                                    </RepeatButton>
                                </Track.IncreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb x:Name="Thumb"
                         Style="{StaticResource CustomThumbForSlider}" >
                                    </Thumb>
                                </Track.Thumb>
                            </Track>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Geometry x:Key="UpArrowGeometry">M0,5 L4.5,.5 9,5 6,5 4.5,3.5 3,5 z</Geometry>
    <Geometry x:Key="DownArrowGeometry">M0,0 L3,0 4.5,1.5 6,0 9,0 4.5,4.5 z</Geometry>

    <DataTemplate x:Key="IncreaseGlyphNormalKey">
        <Path Width="9"
            Height="5"
            Data="{StaticResource UpArrowGeometry}"
            Fill="{DynamicResource {x:Static themes:ResourceKeys.GlyphNormalForegroundKey}}"
            SnapsToDevicePixels="True"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Focusable="False" />
    </DataTemplate>
    <DataTemplate x:Key="IncreaseGlyphDisabledKey">
        <Path	Width="9"
            Height="5"
            Data="{StaticResource UpArrowGeometry}"
            Fill="{DynamicResource {x:Static themes:ResourceKeys.GlyphDisabledForegroundKey}}"
            SnapsToDevicePixels="True"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Focusable="False" />
    </DataTemplate>

    <DataTemplate x:Key="DecreaseGlyphNormalKey">
        <Path Width="9"
            Height="5"
            Data="{StaticResource DownArrowGeometry}"
            Fill="{DynamicResource {x:Static themes:ResourceKeys.GlyphNormalForegroundKey}}"
            SnapsToDevicePixels="True"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Focusable="False" />
    </DataTemplate>

    <DataTemplate x:Key="DecreaseGlyphDisabledKey">
        <Path	Width="9"
            Height="5"
            Data="{StaticResource DownArrowGeometry}"
            Fill="{DynamicResource {x:Static themes:ResourceKeys.GlyphDisabledForegroundKey}}"
            SnapsToDevicePixels="True"
            HorizontalAlignment="Center"
            VerticalAlignment="Center"
            Focusable="False" />
    </DataTemplate>

    <Style x:Key="NumericUpDown"
         TargetType="{x:Type prim:InputBase}">
        <Setter Property="Background" Value="{DynamicResource TextBox.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="Height" Value="22" />
        <Setter Property="WatermarkTemplate" Value="{StaticResource DefaultWatermarkTemplate}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Control">
                    <local:ButtonSpinner x:Name="PART_Spinner"
                               IsTabStop="False"
                               Background="{TemplateBinding Background}"
                               BorderThickness="{TemplateBinding BorderThickness}"
                               BorderBrush="{TemplateBinding BorderBrush}"
                               HorizontalContentAlignment="Stretch"
                               VerticalContentAlignment="Stretch"
                               AllowSpin="{Binding AllowSpin, RelativeSource={RelativeSource TemplatedParent}}"
                               ShowButtonSpinner="False"
                               ButtonSpinnerLocation="{Binding ButtonSpinnerLocation, RelativeSource={RelativeSource TemplatedParent}}">
                        <local:WatermarkTextBox x:Name="PART_TextBox"
                                    BorderThickness="0"
                                    Background="Transparent"
                                    ContextMenu="{TemplateBinding ContextMenu}"
                                    FontFamily="{TemplateBinding FontFamily}"
                                    FontSize="{TemplateBinding FontSize}"
                                    FontStretch="{TemplateBinding FontStretch}"
                                    FontStyle="{TemplateBinding FontStyle}"
                                    FontWeight="{TemplateBinding FontWeight}"
                                    Foreground="{TemplateBinding Foreground}"
                                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    IsUndoEnabled="{Binding IsUndoEnabled, RelativeSource={RelativeSource TemplatedParent}}"
                                    IsTabStop="True"
                                    MinWidth="20"
                                    AcceptsReturn="False"
                                    Padding="{TemplateBinding Padding}"
                                    AutoSelectBehavior="{Binding AutoSelectBehavior, RelativeSource={RelativeSource TemplatedParent}}"
                                    AutoMoveFocus="{Binding AutoMoveFocus, RelativeSource={RelativeSource TemplatedParent}}"
                                    TextAlignment="{Binding TextAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                                    TextWrapping="NoWrap"
                                    TabIndex="{TemplateBinding TabIndex}"
                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Watermark="{Binding Watermark, RelativeSource={RelativeSource TemplatedParent}}"
                                    WatermarkTemplate="{Binding WatermarkTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                    MaxLength="{Binding MaxLength, RelativeSource={RelativeSource TemplatedParent}}">
                        </local:WatermarkTextBox>
                    </local:ButtonSpinner>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                     Value="False">
                            <Setter Property="Foreground"
                      Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource Border.IsMouseOver}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:ByteUpDown}" BasedOn="{StaticResource NumericUpDown}" />

    <Style TargetType="{x:Type local:ColorCanvas}">
        <Setter Property="Background"
            Value="{StaticResource ColorCanvasBackgroundBrush}" />
        <Setter Property="BorderBrush"
            Value="{StaticResource ColorPickerDarkBorderBrush}" />
        <Setter Property="BorderThickness"
            Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ColorCanvas}">
                    <Border Background="{TemplateBinding Background}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  Padding="3">
                        <Grid Margin="2">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="200" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>

                                <Border BorderThickness="1"
                        BorderBrush="{DynamicResource Border}"
                        ClipToBounds="True"
                        Background="{StaticResource CheckerBrush}">
                                    <Canvas x:Name="PART_ColorShadingCanvas"
                          Width="200"
                          Height="100"
                          HorizontalAlignment="Left"
                          VerticalAlignment="Top">
                                        <Rectangle x:Name="ColorShadingRectangle"
                               Height="{Binding ElementName=PART_ColorShadingCanvas, Path=Height}"
                               Width="{Binding ElementName=PART_ColorShadingCanvas, Path=Width}"
                               Fill="{Binding SelectedColor, ElementName=PART_SpectrumSlider, Converter={StaticResource ColorToSolidColorBrushConverter}}" />
                                        <Rectangle x:Name="WhiteGradient"
                               Width="{Binding ElementName=PART_ColorShadingCanvas,Path=Width}"
                               Height="{Binding ElementName=PART_ColorShadingCanvas,Path=Height}">
                                            <Rectangle.Fill>
                                                <LinearGradientBrush StartPoint="0,0"
                                             EndPoint="1,0">
                                                    <GradientStop Offset="0"
                                        Color="#ffffffff" />
                                                    <GradientStop Offset="1"
                                        Color="Transparent" />
                                                </LinearGradientBrush>
                                            </Rectangle.Fill>
                                        </Rectangle>
                                        <Rectangle x:Name="BlackGradient"
                               Width="{Binding ElementName=PART_ColorShadingCanvas,Path=Width}"
                               Height="{Binding ElementName=PART_ColorShadingCanvas,Path=Height}">
                                            <Rectangle.Fill>
                                                <LinearGradientBrush StartPoint="0,1"
                                             EndPoint="0, 0">
                                                    <GradientStop Offset="0"
                                        Color="#ff000000" />
                                                    <GradientStop Offset="1"
                                        Color="#00000000" />
                                                </LinearGradientBrush>
                                            </Rectangle.Fill>
                                        </Rectangle>
                                        <Canvas x:Name="PART_ColorShadeSelector"
                            Width="10"
                            Height="10"
                            IsHitTestVisible="False">
                                            <Ellipse Width="10"
                               Height="10"
                               StrokeThickness="3"
                               Stroke="#FFFFFFFF"
                               IsHitTestVisible="False" />
                                            <Ellipse Width="10"
                               Height="10"
                               StrokeThickness="1"
                               Stroke="#FF000000"
                               IsHitTestVisible="False" />
                                        </Canvas>
                                    </Canvas>
                                </Border>

                                <Border Grid.Row="1"
                        Margin="0,5,0,0">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="*" />
                                        </Grid.ColumnDefinitions>
                                        <Border x:Name="SelectedColorBorder"
                            Background="{StaticResource CheckerBrush}"
                            Height="22"
                            Margin="0,0,2,0"
                            BorderThickness="1"
                            BorderBrush="{DynamicResource Border}">
                                            <Rectangle x:Name="SelectedColor"
                                 Fill="{Binding SelectedColor, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ColorToSolidColorBrushConverter}}" />
                                        </Border>
                                        <TextBox x:Name="PART_HexadecimalTextBox" Grid.Column="1" Margin="2,0,0,0" VerticalAlignment="Center" Foreground="{TemplateBinding Foreground}" Style="{StaticResource ColorCanvasTextBoxStyle}" />
                                    </Grid>
                                </Border>

                                <Border Grid.Column="1"
                        Grid.RowSpan="2"
                        Margin="4,-8,0,0"
                        ClipToBounds="False">
                                    <local:ColorSpectrumSlider x:Name="PART_SpectrumSlider"
                                             VerticalAlignment="Stretch" >
                                    </local:ColorSpectrumSlider>
                                </Border>
                            </Grid>

                            <Border x:Name="RGBBorder"
                      MinWidth="180"
                      Grid.Row="1"
                      BorderThickness="1"
                      ClipToBounds="True"
                      Margin="0,10,0,0">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="30" />
                                    </Grid.ColumnDefinitions>

                                    <TextBlock Grid.Row="0"
                             Grid.Column="0"
                             Text="R"
                             Foreground="{TemplateBinding Foreground}"
                             VerticalAlignment="Center" >
                                    </TextBlock>
                                    <Slider x:Name="PART_RSlider"
                          Maximum="255"
                          SmallChange="1"
                          LargeChange="10"
                          TickFrequency="1"
                          Grid.Row="0"
                          Grid.Column="1"
                          Margin="6,6,6,6"
                          Style="{StaticResource ColorCanvasSliderStyle}"
                          Value="{Binding R, RelativeSource={RelativeSource TemplatedParent}}"
                          VerticalAlignment="Center" >
                                    </Slider>
                                    <local:ByteUpDown Grid.Row="0"
                                    Grid.Column="2"
                                    Value="{Binding Value, ElementName=PART_RSlider}"
                                    VerticalAlignment="Center" >
                                    </local:ByteUpDown>

                                    <TextBlock Grid.Row="1"
                             Grid.Column="0"
                             Text="G"
                             Foreground="{TemplateBinding Foreground}"
                             VerticalAlignment="Center" >
                                    </TextBlock>
                                    <Slider x:Name="PART_GSlider"
                          Maximum="255"
                          SmallChange="1"
                          LargeChange="10"
                          TickFrequency="1"
                          Grid.Row="1"
                          Grid.Column="1"
                          Margin="6,6,6,6"
                          Style="{StaticResource ColorCanvasSliderStyle}"
                          Value="{Binding G, RelativeSource={RelativeSource TemplatedParent}}"
                          VerticalAlignment="Center" >
                                    </Slider>
                                    <local:ByteUpDown Grid.Row="1"
                                    Grid.Column="2"
                                    Value="{Binding Value, ElementName=PART_GSlider}"
                                    VerticalAlignment="Center">
                                    </local:ByteUpDown>

                                    <TextBlock Grid.Row="2"
                             Grid.Column="0"
                             Text="B"
                             Foreground="{TemplateBinding Foreground}"
                             VerticalAlignment="Center" >
                                    </TextBlock>
                                    <Slider x:Name="PART_BSlider"
                          Maximum="255"
                          SmallChange="1"
                          LargeChange="10"
                          TickFrequency="1"
                          Grid.Row="2"
                          Grid.Column="1"
                          Margin="6,6,6,6"
                          Style="{StaticResource ColorCanvasSliderStyle}"
                          Value="{Binding B, RelativeSource={RelativeSource TemplatedParent}}"
                          VerticalAlignment="Center" >
                                    </Slider>
                                    <local:ByteUpDown Grid.Row="2"
                                    Grid.Column="3"
                                    Value="{Binding Value, ElementName=PART_BSlider}"
                                    VerticalAlignment="Center">
                                    </local:ByteUpDown>

                                    <TextBlock Grid.Row="3"
                             Grid.Column="0"
                             Text="A"
                             Foreground="{TemplateBinding Foreground}"
                             VerticalAlignment="Center"
                             Visibility="{Binding Path=UsingAlphaChannel, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" >
                                    </TextBlock>
                                    <Slider x:Name="PART_OpacitySlider"
                          Grid.Row="3"
                          Grid.Column="1"
                          Maximum="255"
                          SmallChange="1"
                          LargeChange="10"
                          Margin="6,6,6,6"
                          Style="{StaticResource ColorCanvasSliderStyle}"
                          Value="{Binding Path=A, RelativeSource={RelativeSource TemplatedParent}}"
                          VerticalAlignment="Center"
                          Visibility="{Binding Path=UsingAlphaChannel, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" >
                                    </Slider>
                                    <local:ByteUpDown Grid.Row="3"
                                    Grid.Column="3"
                                    Value="{Binding Value, ElementName=PART_OpacitySlider}"
                                    VerticalAlignment="Center"
                                    Visibility="{Binding Path=UsingAlphaChannel, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" >
                                    </local:ByteUpDown>
                                </Grid>
                            </Border>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                     Value="False">
                            <Setter Property="Foreground"
                      Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                        <Trigger Property="SelectedColor"
                     Value="{x:Null}">
                            <Setter Property="Visibility"
                      Value="Collapsed"
                      TargetName="PART_ColorShadeSelector" />
                            <Setter Property="Background"
                      Value="Transparent"
                      TargetName="SelectedColorBorder" />
                            <Setter Property="IsEnabled"
                      Value="False"
                      TargetName="RGBBorder" />
                            <Setter Property="TextElement.Foreground"
                      Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"
                      TargetName="RGBBorder" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:ColorSpectrumSlider}">
        <Setter Property="BorderBrush"
            Value="{DynamicResource Border}" />
        <Setter Property="BorderThickness"
            Value="1" />
        <Setter Property="SmallChange"
            Value="10" />
        <Setter Property="Orientation"
            Value="Vertical" />
        <Setter Property="Background"
            Value="Transparent" />
        <Setter Property="Foreground"
            Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Minimum"
            Value="0" />
        <Setter Property="Maximum"
            Value="360" />
        <Setter Property="TickFrequency"
            Value="0.001" />
        <Setter Property="IsSnapToTickEnabled"
            Value="True" />
        <Setter Property="IsDirectionReversed"
            Value="False" />
        <Setter Property="IsMoveToPointEnabled"
            Value="True" />
        <Setter Property="Value"
            Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ColorSpectrumSlider}">
                    <Grid>
                        <Border BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Margin="0,8,0,0">
                            <Border x:Name="PART_TrackBackground"
                      Width="15">
                                <Rectangle x:Name="PART_SpectrumDisplay"
                           Stretch="Fill"
                           VerticalAlignment="Stretch" />
                            </Border>
                        </Border>

                        <Track Name="PART_Track">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Style="{StaticResource SliderRepeatButtonStyle}"
                              Command="Slider.DecreaseLarge" />
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Style="{StaticResource SliderRepeatButtonStyle}"
                              Command="Slider.IncreaseLarge" />
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource VerticalSlideThumbStyle}" />
                            </Track.Thumb>
                        </Track>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <LinearGradientBrush x:Key="PopupBackgroundBrush"
                       StartPoint="0,0"
                       EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Offset="0"
                      Color="#FFffffff" />
                <GradientStop Offset="1"
                      Color="#FFE8EBED" />
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <Style x:Key="ColorItemContainerStyle"
         TargetType="{x:Type ListBoxItem}">
        <Setter Property="ToolTip"
            Value="{Binding Name}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Grid x:Name="mainGrid"
                ToolTip="{Binding Name}">
                        <Grid.Resources>
                            <Style TargetType="ToolTip">
                                <Style.Triggers>
                                    <Trigger Property="Content"
                           Value="{x:Static sys:String.Empty}">
                                        <Setter Property="Visibility"
                            Value="Collapsed" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Grid.Resources>
                        <ContentPresenter HorizontalAlignment="Center"
                              VerticalAlignment="Center" />
                        <Border BorderThickness="1" Background="Transparent" BorderBrush="Transparent" x:Name="_outerBorder" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                            <Border Background="Transparent" BorderThickness="1" BorderBrush="Transparent" x:Name="_innerBorder" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="_innerBorder" Property="BorderBrush" Value="{DynamicResource Border.IsMouseOver}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="_innerBorder" Property="BorderBrush" Value="{DynamicResource Border.IsSelected}" />
                        </Trigger>
                        <DataTrigger Binding="{Binding DisplayColorTooltip, RelativeSource={RelativeSource AncestorType={x:Type local:ColorPicker}}}" Value="False">
                            <Setter Property="ToolTip" Value="{x:Static sys:String.Empty}" TargetName="mainGrid" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate x:Key="ColorItemTemplate">
        <Grid>
            <Border Background="{StaticResource CheckerBrush}" BorderBrush="{DynamicResource Border}" BorderThickness="1" Margin="2,2,2,2">
                <Rectangle Width="14" Height="14">
                    <Rectangle.Style>
                        <Style TargetType="Rectangle">
                            <Setter Property="Fill" Value="{Binding Color, Converter={StaticResource ColorToSolidColorBrushConverter}}" />
                        </Style>
                    </Rectangle.Style>
                </Rectangle>
            </Border>
        </Grid>
    </DataTemplate>

    <Style x:Key="ColorPickerButtonChrome" TargetType="{x:Type chrome:ButtonChrome}">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="{DynamicResource ComboBox.Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ComboBox.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Width" Value="14" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type chrome:ButtonChrome}">
                    <Grid>

                        <Border x:Name="OuterBorder" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                            <Border x:Name="InnerBorder" BorderThickness="0" />
                        </Border>

                        <Border x:Name="MouseOverVisual" Opacity="0" Visibility="Collapsed" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" BorderBrush="{DynamicResource ComboBox.IsMouseOver.Border}" Background="{DynamicResource ComboBox.IsMouseOver.Background}">
                            <Border x:Name="MouseOverInnerVisual" BorderThickness="0" CornerRadius="{TemplateBinding InnerCornerRadius}" BorderBrush="{DynamicResource {x:Static themes:ResourceKeys.ButtonMouseOverInnerBorderKey}}" />
                        </Border>
                        <Border x:Name="PressedVisual" Opacity="0" Visibility="Visible" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{TemplateBinding CornerRadius}" BorderBrush="{DynamicResource ComboBox.IsMouseOver.Border}" Background="{DynamicResource ComboBox.IsMouseOver.Background}">
                            <Border x:Name="PressedInnerVisual" BorderThickness="0" CornerRadius="{TemplateBinding InnerCornerRadius}" BorderBrush="{DynamicResource {x:Static themes:ResourceKeys.ButtonPressedInnerBorderKey}}" />
                        </Border>

                        <ContentPresenter Margin="{TemplateBinding Padding}"
										      IsEnabled="{TemplateBinding IsEnabled}"
										      Content="{TemplateBinding Content}"
										      ContentStringFormat="{TemplateBinding ContentStringFormat}"
										      ContentTemplate="{TemplateBinding ContentTemplate}"
										      ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />

                    </Grid>
                    <ControlTemplate.Triggers>

                        <!-- if button is enabled and pressed -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderEnabled" Value="True" />
                                <Condition Property="RenderPressed" Value="True" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Visibility" Value="Visible" TargetName="PressedVisual" />
                                <Setter Property="Opacity" Value="1" TargetName="PressedVisual" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>

                        <!-- if button is enabled, is not checked, the mouse is over, and not pressed -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderEnabled" Value="True" />
                                <Condition Property="RenderMouseOver" Value="True" />
                                <Condition Property="RenderPressed" Value="False" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Visibility" Value="Visible" TargetName="MouseOverVisual" />
                                <Setter Property="Opacity" Value="1" TargetName="MouseOverVisual" />
                            </MultiTrigger.Setters>
                        </MultiTrigger>

                        <!-- if button is enabled, checked, he mouse is not over, and it is not pressed -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="RenderEnabled" Value="True" />
                                <Condition Property="RenderChecked" Value="True" />
                                <Condition Property="RenderMouseOver" Value="False" />
                                <Condition Property="RenderPressed" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{DynamicResource ComboBox.IsMouseOver.Border}" />
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{DynamicResource ComboBox.IsMouseOver.Border}" />
                            <Setter TargetName="OuterBorder" Property="Background" Value="{DynamicResource ComboBox.IsMouseOver.Background}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ColorPickerToggleButtonStyle" TargetType="ToggleButton">
        <Setter Property="Background" Value="{DynamicResource ComboBox.Background}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid SnapsToDevicePixels="True">

                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <Border Background="{TemplateBinding Background}"
                      BorderBrush="{TemplateBinding BorderBrush}"
                      BorderThickness="{TemplateBinding BorderThickness}"
                      Padding="{TemplateBinding Padding}"
                      SnapsToDevicePixels="True">
                                <ContentPresenter Content="{TemplateBinding Content}"
                                  ContentTemplate="{TemplateBinding ContentTemplate}"
                                  ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
                            </Border>

                            <chrome:ButtonChrome x:Name="ToggleButtonChrome" Style="{DynamicResource ColorPickerButtonChrome}"
                                   Grid.Column="1"
                                   CornerRadius="0"
                                   Height="22"
                                   Visibility="{Binding ShowDropDownButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:ColorPicker}, Converter={StaticResource BooleanToVisibilityConverter}}"
                                   RenderChecked="{Binding IsOpen, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:ColorPicker}}"
                                   RenderEnabled="{Binding IsEnabled, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:ColorPicker}}"
                                   RenderMouseOver="{TemplateBinding IsMouseOver}"
                                   RenderPressed="{TemplateBinding IsPressed}">

                                <Grid x:Name="arrowGlyph"
                      IsHitTestVisible="False"
                      Grid.Column="1"
                      Margin="4">
                                    <Path x:Name="Arrow"
                        Width="6"
                        Height="3"
                                Data="M 0 0 L 4 4 L 8 0 Z"
                        Fill="{DynamicResource ComboBox.Foreground}"
                                          Stretch="Fill"
                                        Margin="0,1,0,0" />
                                </Grid>
                            </chrome:ButtonChrome>
                        </Grid>

                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                     Value="False">
                            <Setter Property="Fill"
                      TargetName="Arrow"
                      Value="#AFAFAF" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ColorDisplayStyle" TargetType="ContentControl">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Height" Value="20" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border Background="{StaticResource CheckerBrush}" BorderBrush="{DynamicResource ComboBox.Border}" BorderThickness="0">
                        <Rectangle Fill="{Binding SelectedColor, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:ColorPicker}, Converter={StaticResource ColorToSolidColorBrushConverter}}" />
                    </Border>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding SelectedColor, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=local:ColorPicker}}" Value="{x:Null}">
                <Setter Property="Visibility" Value="Collapsed" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ColorListStyle"
         TargetType="ListBox">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="MaxHeight" Value="275" />
        <!-- ConverterParameter is margin/Padding from Popup-->
        <Setter Property="Width" Value="{Binding MaxDropDownWidth, RelativeSource={RelativeSource AncestorType={x:Type local:ColorPicker}}, Converter={StaticResource AdditionConverter}, ConverterParameter=-18}" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel Width="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListBox}, Converter={StaticResource AdditionConverter}, ConverterParameter=-4}" />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle" Value="{StaticResource ColorItemContainerStyle}" />
        <Setter Property="ItemTemplate" Value="{StaticResource ColorItemTemplate}" />
        <Setter Property="SelectionMode" Value="Single" />
    </Style>

    <ControlTemplate x:Key="TabItemTemplate"
                   TargetType="{x:Type local:ColorPickerTabItem}">
        <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
            <Border x:Name="mainBorder" BorderBrush="{DynamicResource Border}" BorderThickness="1,1,1,0" Background="{TemplateBinding Background}" Margin="0">
                <Border x:Name="innerBorder" BorderBrush="{DynamicResource Border.IsMouseOver}" BorderThickness="1,1,1,0" Background="{TemplateBinding Background}" Margin="-1" Opacity="0" />
            </Border>
            <ContentPresenter x:Name="contentPresenter"
                        ContentSource="Header"
                        Focusable="False"
                        HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                        Margin="{TemplateBinding Padding}"
                        RecognizesAccessKey="True"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                        VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
        </Grid>
        <ControlTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Panel.ZIndex" Value="1" />
                <Setter Property="Margin" Value="-2,-2,-2,0" />
                <Setter Property="Opacity" TargetName="innerBorder" Value="1" />
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type local:ColorPicker}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Background" Value="{DynamicResource Background}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Border}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="ButtonStyle" Value="{StaticResource ColorPickerToggleButtonStyle}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="MaxDropDownWidth" Value="250" />
        <Setter Property="HeaderBackground" Value="{DynamicResource Background}" />
        <Setter Property="HeaderForeground" Value="{DynamicResource Foreground}" />
        <Setter Property="DropDownBackground" Value="{DynamicResource Background}" />
        <!--<Setter Property="DropDownBorderBrush" Value="{DynamicResource ComboBox.Popup.Border}" />
        <Setter Property="DropDownBorderThickness" Value="1" />-->
        <Setter Property="TabBackground" Value="{DynamicResource Background}" />
        <Setter Property="TabForeground" Value="{DynamicResource Foreground}" />
        <Setter Property="Foreground" Value="{DynamicResource Foreground}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ColorPicker}">
                    <Grid>
                        <ToggleButton x:Name="PART_ColorPickerToggleButton" IsTabStop="True" MinHeight="22" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Padding="{TemplateBinding Padding}" IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" IsHitTestVisible="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}" Style="{TemplateBinding ButtonStyle}">
                            <Grid Margin="0">
                                <Border x:Name="ColorOnlyBorder" Background="Transparent" BorderThickness="1,1,0,1" BorderBrush="{DynamicResource ComboBox.Border}">
                                    <ContentControl x:Name="ColorOnly" Style="{StaticResource ColorDisplayStyle}" />
                                </Border>
                                <Border x:Name="ColorAndName" Background="Transparent" Visibility="Collapsed">
                                    <StackPanel Orientation="Horizontal">
                                        <ContentControl HorizontalAlignment="Left" Margin="0" Style="{StaticResource ColorDisplayStyle}" />
                                        <TextBlock Text="{Binding SelectedColorText, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="Center" />
                                    </StackPanel>
                                </Border>
                            </Grid>
                        </ToggleButton>

                        <Popup x:Name="PART_ColorPickerPalettePopup" VerticalAlignment="Bottom" IsOpen="{Binding ElementName=PART_ColorPickerToggleButton, Path=IsChecked}" StaysOpen="False" AllowsTransparency="True" Focusable="False" HorizontalOffset="0" VerticalOffset="1" PopupAnimation="None" ToolTip="{x:Static sys:String.Empty}" Width="{TemplateBinding MaxDropDownWidth}">
                            <Popup.Resources>
                                <Style TargetType="ToolTip">
                                    <Style.Triggers>
                                        <Trigger Property="Content" Value="{x:Static sys:String.Empty}">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Popup.Resources>
                            <Border BorderThickness="1" Background="{TemplateBinding DropDownBackground}" BorderBrush="{DynamicResource ComboBox.Popup.Border}" Padding="0">
                                <TabControl x:Name="ColorPickerTabControl" Background="Transparent" SelectedIndex="{Binding ColorMode, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource  ColorModeToTabItemSelectedConverter}}" BorderThickness="0">
                                    <local:ColorPickerTabItem x:Name="StandardTabItem"
                                            Header="{Binding StandardTabHeader, RelativeSource={RelativeSource TemplatedParent}}"
                                            Background="{TemplateBinding TabBackground}"
                                            Foreground="{TemplateBinding TabForeground}"
                                            Template="{StaticResource TabItemTemplate}">
                                        <Grid x:Name="_colorPaletteHost" Margin="5,0,0,5">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition Height="Auto" />
                                            </Grid.RowDefinitions>
                                            <!-- Available Colors -->
                                            <Grid Grid.Row="1" Visibility="{TemplateBinding ShowAvailableColors, Converter={StaticResource BooleanToVisibilityConverter}}">
                                                <Grid>
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition Height="Auto" />
                                                        <RowDefinition />
                                                    </Grid.RowDefinitions>
                                                    <TextBlock Text="{TemplateBinding AvailableColorsHeader}" Background="{TemplateBinding HeaderBackground}" Foreground="{TemplateBinding HeaderForeground}" Padding="2" Margin="0,0,0,1" />
                                                    <ListBox x:Name="PART_AvailableColors" Grid.Row="1" ItemsSource="{Binding AvailableColors, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ColorListStyle}" />
                                                </Grid>
                                            </Grid>
                                            <!-- Standard Colors-->
                                            <Grid Grid.Row="2" Visibility="{TemplateBinding ShowStandardColors, Converter={StaticResource BooleanToVisibilityConverter}}">
                                                <Grid>
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition Height="Auto" />
                                                        <RowDefinition Height="Auto" />
                                                    </Grid.RowDefinitions>
                                                    <TextBlock Text="{TemplateBinding StandardColorsHeader}" Background="{TemplateBinding HeaderBackground}" Foreground="{TemplateBinding HeaderForeground}" Padding="2" Margin="0,1,0,1" />
                                                    <ListBox x:Name="PART_StandardColors" Grid.Row="1" ItemsSource="{Binding StandardColors, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ColorListStyle}" />
                                                </Grid>
                                            </Grid>
                                            <!-- Recent Colors-->
                                            <Grid Grid.Row="3" Margin="0,1,0,1" Visibility="{TemplateBinding ShowRecentColors, Converter={StaticResource BooleanToVisibilityConverter}}">
                                                <Grid>
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition Height="Auto" />
                                                        <RowDefinition Height="22" />
                                                    </Grid.RowDefinitions>
                                                    <TextBlock Text="{TemplateBinding RecentColorsHeader}" Background="{TemplateBinding HeaderBackground}" Foreground="{TemplateBinding HeaderForeground}" Padding="2" Margin="0,1,0,1" />
                                                    <ListBox x:Name="PART_RecentColors" Grid.Row="1" ItemsSource="{Binding RecentColors, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ColorListStyle}" />
                                                </Grid>
                                            </Grid>
                                        </Grid>
                                    </local:ColorPickerTabItem>
                                    <local:ColorPickerTabItem x:Name="AdvancedTabItem"
                                            Header="{Binding AdvancedTabHeader, RelativeSource={RelativeSource TemplatedParent}}"
                                            Background="{TemplateBinding TabBackground}"
                                            Foreground="{TemplateBinding TabForeground}"
                                            Template="{StaticResource TabItemTemplate}">
                                        <!-- ColorCanvas -->
                                        <!-- ConverterParameter is margin/Padding from Popup-->
                                        <Grid x:Name="_colorCanvasHost" Width="{Binding MaxDropDownWidth, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource AdditionConverter}, ConverterParameter=-18}" Margin="0,5,0,0">
                                            <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Hidden">
                                                <local:ColorCanvas Background="Transparent" BorderThickness="0" Foreground="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}" UsingAlphaChannel="{Binding UsingAlphaChannel, RelativeSource={RelativeSource TemplatedParent}}" SelectedColor="{Binding SelectedColor, RelativeSource={RelativeSource TemplatedParent}}" />
                                            </ScrollViewer>
                                        </Grid>
                                    </local:ColorPickerTabItem>
                                </TabControl>
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="DisplayColorAndName" Value="True">
                            <Setter TargetName="ColorOnly" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="ColorAndName" Property="Visibility" Value="Visible" />
                        </Trigger>

                        <Trigger Property="ShowTabHeaders" Value="False">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="StandardTabItem" />
                            <Setter Property="Visibility" Value="Collapsed" TargetName="AdvancedTabItem" />
                        </Trigger>

                        <Trigger Property="ShowDropDownButton" Value="False">
                            <Setter Property="BorderThickness" Value="1" />
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="{DynamicResource ComboBox.IsMouseOver.Border}" TargetName="ColorOnlyBorder" />
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>